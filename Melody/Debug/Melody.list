
Melody.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002314  0800018c  0800018c  0001018c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  080024a0  080024a0  000124a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080024e0  080024e0  00020078  2**0
                  CONTENTS
  4 .ARM          00000000  080024e0  080024e0  00020078  2**0
                  CONTENTS
  5 .preinit_array 00000000  080024e0  080024e0  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080024e0  080024e0  000124e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080024e4  080024e4  000124e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  080024e8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000060  20000078  08002560  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000d8  08002560  000200d8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000978e  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000159a  00000000  00000000  00029836  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000aa8  00000000  00000000  0002add0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000009f0  00000000  00000000  0002b878  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001f30e  00000000  00000000  0002c268  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000759d  00000000  00000000  0004b576  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c0434  00000000  00000000  00052b13  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00112f47  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002bd4  00000000  00000000  00112fc4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	; (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	20000078 	.word	0x20000078
 80001a8:	00000000 	.word	0x00000000
 80001ac:	08002488 	.word	0x08002488

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	; (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	; (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	; (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	2000007c 	.word	0x2000007c
 80001c8:	08002488 	.word	0x08002488

080001cc <tone_stop>:
    __HAL_TIM_SET_AUTORELOAD(&htim2 , freq);
    __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, freq/2);
    __HAL_TIM_SET_COUNTER(&htim2, 0);
}

static void tone_stop(){
 80001cc:	b580      	push	{r7, lr}
 80001ce:	af00      	add	r7, sp, #0
  HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_2);
 80001d0:	2104      	movs	r1, #4
 80001d2:	4802      	ldr	r0, [pc, #8]	; (80001dc <tone_stop+0x10>)
 80001d4:	f001 fc46 	bl	8001a64 <HAL_TIM_PWM_Stop>
}
 80001d8:	bf00      	nop
 80001da:	bd80      	pop	{r7, pc}
 80001dc:	20000094 	.word	0x20000094

080001e0 <tone_start>:

static void tone_start(){
 80001e0:	b580      	push	{r7, lr}
 80001e2:	af00      	add	r7, sp, #0
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 80001e4:	2104      	movs	r1, #4
 80001e6:	4802      	ldr	r0, [pc, #8]	; (80001f0 <tone_start+0x10>)
 80001e8:	f001 fbf2 	bl	80019d0 <HAL_TIM_PWM_Start>
}
 80001ec:	bf00      	nop
 80001ee:	bd80      	pop	{r7, pc}
 80001f0:	20000094 	.word	0x20000094

080001f4 <song_A.8307>:
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  void song_A()
  {
 80001f4:	b580      	push	{r7, lr}
 80001f6:	b084      	sub	sp, #16
 80001f8:	af00      	add	r7, sp, #0
 80001fa:	f8c7 c004 	str.w	ip, [r7, #4]
	  for (int i = 0 ; i < sizeof(A)/sizeof(enum notes) ; i++) {
 80001fe:	2300      	movs	r3, #0
 8000200:	60fb      	str	r3, [r7, #12]
 8000202:	e033      	b.n	800026c <song_A.8307+0x78>
	 	        __HAL_TIM_SET_AUTORELOAD(&htim2, 32000000 / A[i] );
 8000204:	4a21      	ldr	r2, [pc, #132]	; (800028c <song_A.8307+0x98>)
 8000206:	68fb      	ldr	r3, [r7, #12]
 8000208:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800020c:	461a      	mov	r2, r3
 800020e:	4b20      	ldr	r3, [pc, #128]	; (8000290 <song_A.8307+0x9c>)
 8000210:	fb93 f2f2 	sdiv	r2, r3, r2
 8000214:	4b1f      	ldr	r3, [pc, #124]	; (8000294 <song_A.8307+0xa0>)
 8000216:	681b      	ldr	r3, [r3, #0]
 8000218:	62da      	str	r2, [r3, #44]	; 0x2c
 800021a:	4a1c      	ldr	r2, [pc, #112]	; (800028c <song_A.8307+0x98>)
 800021c:	68fb      	ldr	r3, [r7, #12]
 800021e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000222:	461a      	mov	r2, r3
 8000224:	4b1a      	ldr	r3, [pc, #104]	; (8000290 <song_A.8307+0x9c>)
 8000226:	fb93 f3f2 	sdiv	r3, r3, r2
 800022a:	461a      	mov	r2, r3
 800022c:	4b19      	ldr	r3, [pc, #100]	; (8000294 <song_A.8307+0xa0>)
 800022e:	60da      	str	r2, [r3, #12]
	 	        __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 32000000 / A[i] / 2);
 8000230:	4a16      	ldr	r2, [pc, #88]	; (800028c <song_A.8307+0x98>)
 8000232:	68fb      	ldr	r3, [r7, #12]
 8000234:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000238:	461a      	mov	r2, r3
 800023a:	4b17      	ldr	r3, [pc, #92]	; (8000298 <song_A.8307+0xa4>)
 800023c:	fb93 f2f2 	sdiv	r2, r3, r2
 8000240:	4b14      	ldr	r3, [pc, #80]	; (8000294 <song_A.8307+0xa0>)
 8000242:	681b      	ldr	r3, [r3, #0]
 8000244:	639a      	str	r2, [r3, #56]	; 0x38
	 	        HAL_Delay(500);
 8000246:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800024a:	f000 fad3 	bl	80007f4 <HAL_Delay>

	 	        /* �? Note 소리 내고 10 Millisecond �?�어주기 */
	 	        tone_stop() ;
 800024e:	f7ff ffbd 	bl	80001cc <tone_stop>
	 	        HAL_Delay(10);
 8000252:	200a      	movs	r0, #10
 8000254:	f000 face 	bl	80007f4 <HAL_Delay>
	 	        tone_start() ;
 8000258:	f7ff ffc2 	bl	80001e0 <tone_start>

	 	        if(i == (sizeof(A)/sizeof(enum notes)-1))
 800025c:	68fb      	ldr	r3, [r7, #12]
 800025e:	2b17      	cmp	r3, #23
 8000260:	d101      	bne.n	8000266 <song_A.8307+0x72>
	 	        		{
	 	        	i=0;
 8000262:	2300      	movs	r3, #0
 8000264:	60fb      	str	r3, [r7, #12]
	  for (int i = 0 ; i < sizeof(A)/sizeof(enum notes) ; i++) {
 8000266:	68fb      	ldr	r3, [r7, #12]
 8000268:	3301      	adds	r3, #1
 800026a:	60fb      	str	r3, [r7, #12]
 800026c:	68fb      	ldr	r3, [r7, #12]
 800026e:	2b17      	cmp	r3, #23
 8000270:	d9c8      	bls.n	8000204 <song_A.8307+0x10>
	 	        		}
	 	      }
	  /* �?�악 �??나면 5초 후 반복 */
	      tone_stop() ;
 8000272:	f7ff ffab 	bl	80001cc <tone_stop>
	      HAL_Delay(500);
 8000276:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800027a:	f000 fabb 	bl	80007f4 <HAL_Delay>
	      tone_start() ;
 800027e:	f7ff ffaf 	bl	80001e0 <tone_start>
  }
 8000282:	bf00      	nop
 8000284:	3710      	adds	r7, #16
 8000286:	46bd      	mov	sp, r7
 8000288:	bd80      	pop	{r7, pc}
 800028a:	bf00      	nop
 800028c:	20000000 	.word	0x20000000
 8000290:	01e84800 	.word	0x01e84800
 8000294:	20000094 	.word	0x20000094
 8000298:	00f42400 	.word	0x00f42400

0800029c <main>:
{
 800029c:	b580      	push	{r7, lr}
 800029e:	b082      	sub	sp, #8
 80002a0:	af00      	add	r7, sp, #0
int main(void)
 80002a2:	f107 0310 	add.w	r3, r7, #16
 80002a6:	607b      	str	r3, [r7, #4]
  HAL_Init();
 80002a8:	f000 fa33 	bl	8000712 <HAL_Init>
  SystemClock_Config();
 80002ac:	f000 f860 	bl	8000370 <SystemClock_Config>
  MX_GPIO_Init();
 80002b0:	f000 f90c 	bl	80004cc <MX_GPIO_Init>
  MX_TIM2_Init();
 80002b4:	f000 f8ae 	bl	8000414 <MX_TIM2_Init>
  }

  while (1)
  {

	 song_A();
 80002b8:	1d3b      	adds	r3, r7, #4
 80002ba:	469c      	mov	ip, r3
 80002bc:	f7ff ff9a 	bl	80001f4 <song_A.8307>
	 song_B();
 80002c0:	1d3b      	adds	r3, r7, #4
 80002c2:	469c      	mov	ip, r3
 80002c4:	f000 f806 	bl	80002d4 <song_B.8313>
	 song_B();
 80002c8:	1d3b      	adds	r3, r7, #4
 80002ca:	469c      	mov	ip, r3
 80002cc:	f000 f802 	bl	80002d4 <song_B.8313>
	 song_A();
 80002d0:	e7f2      	b.n	80002b8 <main+0x1c>
	...

080002d4 <song_B.8313>:
  {
 80002d4:	b580      	push	{r7, lr}
 80002d6:	b084      	sub	sp, #16
 80002d8:	af00      	add	r7, sp, #0
 80002da:	f8c7 c004 	str.w	ip, [r7, #4]
	  for (int i = 0 ; i < sizeof(B)/sizeof(enum notes) ; i++) {
 80002de:	2300      	movs	r3, #0
 80002e0:	60fb      	str	r3, [r7, #12]
 80002e2:	e02d      	b.n	8000340 <song_B.8313+0x6c>
	 	        __HAL_TIM_SET_AUTORELOAD(&htim2, 32000000 / B[i] );
 80002e4:	4a1e      	ldr	r2, [pc, #120]	; (8000360 <song_B.8313+0x8c>)
 80002e6:	68fb      	ldr	r3, [r7, #12]
 80002e8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80002ec:	461a      	mov	r2, r3
 80002ee:	4b1d      	ldr	r3, [pc, #116]	; (8000364 <song_B.8313+0x90>)
 80002f0:	fb93 f2f2 	sdiv	r2, r3, r2
 80002f4:	4b1c      	ldr	r3, [pc, #112]	; (8000368 <song_B.8313+0x94>)
 80002f6:	681b      	ldr	r3, [r3, #0]
 80002f8:	62da      	str	r2, [r3, #44]	; 0x2c
 80002fa:	4a19      	ldr	r2, [pc, #100]	; (8000360 <song_B.8313+0x8c>)
 80002fc:	68fb      	ldr	r3, [r7, #12]
 80002fe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000302:	461a      	mov	r2, r3
 8000304:	4b17      	ldr	r3, [pc, #92]	; (8000364 <song_B.8313+0x90>)
 8000306:	fb93 f3f2 	sdiv	r3, r3, r2
 800030a:	461a      	mov	r2, r3
 800030c:	4b16      	ldr	r3, [pc, #88]	; (8000368 <song_B.8313+0x94>)
 800030e:	60da      	str	r2, [r3, #12]
	 	        __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 32000000 / B[i] / 2);
 8000310:	4a13      	ldr	r2, [pc, #76]	; (8000360 <song_B.8313+0x8c>)
 8000312:	68fb      	ldr	r3, [r7, #12]
 8000314:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000318:	461a      	mov	r2, r3
 800031a:	4b14      	ldr	r3, [pc, #80]	; (800036c <song_B.8313+0x98>)
 800031c:	fb93 f2f2 	sdiv	r2, r3, r2
 8000320:	4b11      	ldr	r3, [pc, #68]	; (8000368 <song_B.8313+0x94>)
 8000322:	681b      	ldr	r3, [r3, #0]
 8000324:	639a      	str	r2, [r3, #56]	; 0x38
	 	        HAL_Delay(150);
 8000326:	2096      	movs	r0, #150	; 0x96
 8000328:	f000 fa64 	bl	80007f4 <HAL_Delay>
	 	        tone_stop() ;
 800032c:	f7ff ff4e 	bl	80001cc <tone_stop>
	 	        HAL_Delay(10);
 8000330:	200a      	movs	r0, #10
 8000332:	f000 fa5f 	bl	80007f4 <HAL_Delay>
	 	        tone_start() ;
 8000336:	f7ff ff53 	bl	80001e0 <tone_start>
	  for (int i = 0 ; i < sizeof(B)/sizeof(enum notes) ; i++) {
 800033a:	68fb      	ldr	r3, [r7, #12]
 800033c:	3301      	adds	r3, #1
 800033e:	60fb      	str	r3, [r7, #12]
 8000340:	68fb      	ldr	r3, [r7, #12]
 8000342:	2b1d      	cmp	r3, #29
 8000344:	d9ce      	bls.n	80002e4 <song_B.8313+0x10>
	      tone_stop() ;
 8000346:	f7ff ff41 	bl	80001cc <tone_stop>
	      HAL_Delay(500);
 800034a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800034e:	f000 fa51 	bl	80007f4 <HAL_Delay>
	      tone_start() ;
 8000352:	f7ff ff45 	bl	80001e0 <tone_start>
  }
 8000356:	bf00      	nop
 8000358:	3710      	adds	r7, #16
 800035a:	46bd      	mov	sp, r7
 800035c:	bd80      	pop	{r7, pc}
 800035e:	bf00      	nop
 8000360:	20000030 	.word	0x20000030
 8000364:	01e84800 	.word	0x01e84800
 8000368:	20000094 	.word	0x20000094
 800036c:	00f42400 	.word	0x00f42400

08000370 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000370:	b580      	push	{r7, lr}
 8000372:	b096      	sub	sp, #88	; 0x58
 8000374:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000376:	f107 0314 	add.w	r3, r7, #20
 800037a:	2244      	movs	r2, #68	; 0x44
 800037c:	2100      	movs	r1, #0
 800037e:	4618      	mov	r0, r3
 8000380:	f002 f87a 	bl	8002478 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000384:	463b      	mov	r3, r7
 8000386:	2200      	movs	r2, #0
 8000388:	601a      	str	r2, [r3, #0]
 800038a:	605a      	str	r2, [r3, #4]
 800038c:	609a      	str	r2, [r3, #8]
 800038e:	60da      	str	r2, [r3, #12]
 8000390:	611a      	str	r2, [r3, #16]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000392:	2310      	movs	r3, #16
 8000394:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000396:	2301      	movs	r3, #1
 8000398:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800039a:	2300      	movs	r3, #0
 800039c:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800039e:	2360      	movs	r3, #96	; 0x60
 80003a0:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80003a2:	2302      	movs	r3, #2
 80003a4:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80003a6:	2301      	movs	r3, #1
 80003a8:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80003aa:	2301      	movs	r3, #1
 80003ac:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 16;
 80003ae:	2310      	movs	r3, #16
 80003b0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80003b2:	2307      	movs	r3, #7
 80003b4:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80003b6:	2302      	movs	r3, #2
 80003b8:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80003ba:	2302      	movs	r3, #2
 80003bc:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80003be:	f107 0314 	add.w	r3, r7, #20
 80003c2:	4618      	mov	r0, r3
 80003c4:	f000 fcec 	bl	8000da0 <HAL_RCC_OscConfig>
 80003c8:	4603      	mov	r3, r0
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d001      	beq.n	80003d2 <SystemClock_Config+0x62>
  {
    Error_Handler();
 80003ce:	f000 f895 	bl	80004fc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80003d2:	230f      	movs	r3, #15
 80003d4:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80003d6:	2303      	movs	r3, #3
 80003d8:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80003da:	2300      	movs	r3, #0
 80003dc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80003de:	2300      	movs	r3, #0
 80003e0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80003e2:	2300      	movs	r3, #0
 80003e4:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80003e6:	463b      	mov	r3, r7
 80003e8:	2101      	movs	r1, #1
 80003ea:	4618      	mov	r0, r3
 80003ec:	f001 f8f8 	bl	80015e0 <HAL_RCC_ClockConfig>
 80003f0:	4603      	mov	r3, r0
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	d001      	beq.n	80003fa <SystemClock_Config+0x8a>
  {
    Error_Handler();
 80003f6:	f000 f881 	bl	80004fc <Error_Handler>
  }
  /** Configure the main internal regulator output voltage 
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80003fa:	f44f 7000 	mov.w	r0, #512	; 0x200
 80003fe:	f000 fc79 	bl	8000cf4 <HAL_PWREx_ControlVoltageScaling>
 8000402:	4603      	mov	r3, r0
 8000404:	2b00      	cmp	r3, #0
 8000406:	d001      	beq.n	800040c <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000408:	f000 f878 	bl	80004fc <Error_Handler>
  }
}
 800040c:	bf00      	nop
 800040e:	3758      	adds	r7, #88	; 0x58
 8000410:	46bd      	mov	sp, r7
 8000412:	bd80      	pop	{r7, pc}

08000414 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000414:	b580      	push	{r7, lr}
 8000416:	b08a      	sub	sp, #40	; 0x28
 8000418:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800041a:	f107 031c 	add.w	r3, r7, #28
 800041e:	2200      	movs	r2, #0
 8000420:	601a      	str	r2, [r3, #0]
 8000422:	605a      	str	r2, [r3, #4]
 8000424:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000426:	463b      	mov	r3, r7
 8000428:	2200      	movs	r2, #0
 800042a:	601a      	str	r2, [r3, #0]
 800042c:	605a      	str	r2, [r3, #4]
 800042e:	609a      	str	r2, [r3, #8]
 8000430:	60da      	str	r2, [r3, #12]
 8000432:	611a      	str	r2, [r3, #16]
 8000434:	615a      	str	r2, [r3, #20]
 8000436:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000438:	4b22      	ldr	r3, [pc, #136]	; (80004c4 <MX_TIM2_Init+0xb0>)
 800043a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800043e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000440:	4b20      	ldr	r3, [pc, #128]	; (80004c4 <MX_TIM2_Init+0xb0>)
 8000442:	2200      	movs	r2, #0
 8000444:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000446:	4b1f      	ldr	r3, [pc, #124]	; (80004c4 <MX_TIM2_Init+0xb0>)
 8000448:	2200      	movs	r2, #0
 800044a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 122310;
 800044c:	4b1d      	ldr	r3, [pc, #116]	; (80004c4 <MX_TIM2_Init+0xb0>)
 800044e:	4a1e      	ldr	r2, [pc, #120]	; (80004c8 <MX_TIM2_Init+0xb4>)
 8000450:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000452:	4b1c      	ldr	r3, [pc, #112]	; (80004c4 <MX_TIM2_Init+0xb0>)
 8000454:	2200      	movs	r2, #0
 8000456:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000458:	4b1a      	ldr	r3, [pc, #104]	; (80004c4 <MX_TIM2_Init+0xb0>)
 800045a:	2280      	movs	r2, #128	; 0x80
 800045c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800045e:	4819      	ldr	r0, [pc, #100]	; (80004c4 <MX_TIM2_Init+0xb0>)
 8000460:	f001 fa8a 	bl	8001978 <HAL_TIM_PWM_Init>
 8000464:	4603      	mov	r3, r0
 8000466:	2b00      	cmp	r3, #0
 8000468:	d001      	beq.n	800046e <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 800046a:	f000 f847 	bl	80004fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800046e:	2300      	movs	r3, #0
 8000470:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 8000472:	2380      	movs	r3, #128	; 0x80
 8000474:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000476:	f107 031c 	add.w	r3, r7, #28
 800047a:	4619      	mov	r1, r3
 800047c:	4811      	ldr	r0, [pc, #68]	; (80004c4 <MX_TIM2_Init+0xb0>)
 800047e:	f001 ff71 	bl	8002364 <HAL_TIMEx_MasterConfigSynchronization>
 8000482:	4603      	mov	r3, r0
 8000484:	2b00      	cmp	r3, #0
 8000486:	d001      	beq.n	800048c <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8000488:	f000 f838 	bl	80004fc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800048c:	2360      	movs	r3, #96	; 0x60
 800048e:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 31000;
 8000490:	f647 1318 	movw	r3, #31000	; 0x7918
 8000494:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000496:	2300      	movs	r3, #0
 8000498:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800049a:	2300      	movs	r3, #0
 800049c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800049e:	463b      	mov	r3, r7
 80004a0:	2204      	movs	r2, #4
 80004a2:	4619      	mov	r1, r3
 80004a4:	4807      	ldr	r0, [pc, #28]	; (80004c4 <MX_TIM2_Init+0xb0>)
 80004a6:	f001 fb3d 	bl	8001b24 <HAL_TIM_PWM_ConfigChannel>
 80004aa:	4603      	mov	r3, r0
 80004ac:	2b00      	cmp	r3, #0
 80004ae:	d001      	beq.n	80004b4 <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 80004b0:	f000 f824 	bl	80004fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80004b4:	4803      	ldr	r0, [pc, #12]	; (80004c4 <MX_TIM2_Init+0xb0>)
 80004b6:	f000 f86b 	bl	8000590 <HAL_TIM_MspPostInit>

}
 80004ba:	bf00      	nop
 80004bc:	3728      	adds	r7, #40	; 0x28
 80004be:	46bd      	mov	sp, r7
 80004c0:	bd80      	pop	{r7, pc}
 80004c2:	bf00      	nop
 80004c4:	20000094 	.word	0x20000094
 80004c8:	0001ddc6 	.word	0x0001ddc6

080004cc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80004cc:	b480      	push	{r7}
 80004ce:	b083      	sub	sp, #12
 80004d0:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004d2:	4b09      	ldr	r3, [pc, #36]	; (80004f8 <MX_GPIO_Init+0x2c>)
 80004d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004d6:	4a08      	ldr	r2, [pc, #32]	; (80004f8 <MX_GPIO_Init+0x2c>)
 80004d8:	f043 0301 	orr.w	r3, r3, #1
 80004dc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80004de:	4b06      	ldr	r3, [pc, #24]	; (80004f8 <MX_GPIO_Init+0x2c>)
 80004e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004e2:	f003 0301 	and.w	r3, r3, #1
 80004e6:	607b      	str	r3, [r7, #4]
 80004e8:	687b      	ldr	r3, [r7, #4]

}
 80004ea:	bf00      	nop
 80004ec:	370c      	adds	r7, #12
 80004ee:	46bd      	mov	sp, r7
 80004f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004f4:	4770      	bx	lr
 80004f6:	bf00      	nop
 80004f8:	40021000 	.word	0x40021000

080004fc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80004fc:	b480      	push	{r7}
 80004fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000500:	bf00      	nop
 8000502:	46bd      	mov	sp, r7
 8000504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000508:	4770      	bx	lr
	...

0800050c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800050c:	b480      	push	{r7}
 800050e:	b083      	sub	sp, #12
 8000510:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000512:	4b0f      	ldr	r3, [pc, #60]	; (8000550 <HAL_MspInit+0x44>)
 8000514:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000516:	4a0e      	ldr	r2, [pc, #56]	; (8000550 <HAL_MspInit+0x44>)
 8000518:	f043 0301 	orr.w	r3, r3, #1
 800051c:	6613      	str	r3, [r2, #96]	; 0x60
 800051e:	4b0c      	ldr	r3, [pc, #48]	; (8000550 <HAL_MspInit+0x44>)
 8000520:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000522:	f003 0301 	and.w	r3, r3, #1
 8000526:	607b      	str	r3, [r7, #4]
 8000528:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800052a:	4b09      	ldr	r3, [pc, #36]	; (8000550 <HAL_MspInit+0x44>)
 800052c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800052e:	4a08      	ldr	r2, [pc, #32]	; (8000550 <HAL_MspInit+0x44>)
 8000530:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000534:	6593      	str	r3, [r2, #88]	; 0x58
 8000536:	4b06      	ldr	r3, [pc, #24]	; (8000550 <HAL_MspInit+0x44>)
 8000538:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800053a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800053e:	603b      	str	r3, [r7, #0]
 8000540:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000542:	bf00      	nop
 8000544:	370c      	adds	r7, #12
 8000546:	46bd      	mov	sp, r7
 8000548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800054c:	4770      	bx	lr
 800054e:	bf00      	nop
 8000550:	40021000 	.word	0x40021000

08000554 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000554:	b480      	push	{r7}
 8000556:	b085      	sub	sp, #20
 8000558:	af00      	add	r7, sp, #0
 800055a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 800055c:	687b      	ldr	r3, [r7, #4]
 800055e:	681b      	ldr	r3, [r3, #0]
 8000560:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000564:	d10b      	bne.n	800057e <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000566:	4b09      	ldr	r3, [pc, #36]	; (800058c <HAL_TIM_PWM_MspInit+0x38>)
 8000568:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800056a:	4a08      	ldr	r2, [pc, #32]	; (800058c <HAL_TIM_PWM_MspInit+0x38>)
 800056c:	f043 0301 	orr.w	r3, r3, #1
 8000570:	6593      	str	r3, [r2, #88]	; 0x58
 8000572:	4b06      	ldr	r3, [pc, #24]	; (800058c <HAL_TIM_PWM_MspInit+0x38>)
 8000574:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000576:	f003 0301 	and.w	r3, r3, #1
 800057a:	60fb      	str	r3, [r7, #12]
 800057c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800057e:	bf00      	nop
 8000580:	3714      	adds	r7, #20
 8000582:	46bd      	mov	sp, r7
 8000584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000588:	4770      	bx	lr
 800058a:	bf00      	nop
 800058c:	40021000 	.word	0x40021000

08000590 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	b088      	sub	sp, #32
 8000594:	af00      	add	r7, sp, #0
 8000596:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000598:	f107 030c 	add.w	r3, r7, #12
 800059c:	2200      	movs	r2, #0
 800059e:	601a      	str	r2, [r3, #0]
 80005a0:	605a      	str	r2, [r3, #4]
 80005a2:	609a      	str	r2, [r3, #8]
 80005a4:	60da      	str	r2, [r3, #12]
 80005a6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 80005a8:	687b      	ldr	r3, [r7, #4]
 80005aa:	681b      	ldr	r3, [r3, #0]
 80005ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80005b0:	d11c      	bne.n	80005ec <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80005b2:	4b10      	ldr	r3, [pc, #64]	; (80005f4 <HAL_TIM_MspPostInit+0x64>)
 80005b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005b6:	4a0f      	ldr	r2, [pc, #60]	; (80005f4 <HAL_TIM_MspPostInit+0x64>)
 80005b8:	f043 0301 	orr.w	r3, r3, #1
 80005bc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80005be:	4b0d      	ldr	r3, [pc, #52]	; (80005f4 <HAL_TIM_MspPostInit+0x64>)
 80005c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005c2:	f003 0301 	and.w	r3, r3, #1
 80005c6:	60bb      	str	r3, [r7, #8]
 80005c8:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration    
    PA1     ------> TIM2_CH2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80005ca:	2302      	movs	r3, #2
 80005cc:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005ce:	2302      	movs	r3, #2
 80005d0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005d2:	2300      	movs	r3, #0
 80005d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005d6:	2300      	movs	r3, #0
 80005d8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80005da:	2301      	movs	r3, #1
 80005dc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005de:	f107 030c 	add.w	r3, r7, #12
 80005e2:	4619      	mov	r1, r3
 80005e4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005e8:	f000 fa0c 	bl	8000a04 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80005ec:	bf00      	nop
 80005ee:	3720      	adds	r7, #32
 80005f0:	46bd      	mov	sp, r7
 80005f2:	bd80      	pop	{r7, pc}
 80005f4:	40021000 	.word	0x40021000

080005f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80005f8:	b480      	push	{r7}
 80005fa:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80005fc:	bf00      	nop
 80005fe:	46bd      	mov	sp, r7
 8000600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000604:	4770      	bx	lr

08000606 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000606:	b480      	push	{r7}
 8000608:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800060a:	e7fe      	b.n	800060a <HardFault_Handler+0x4>

0800060c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800060c:	b480      	push	{r7}
 800060e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000610:	e7fe      	b.n	8000610 <MemManage_Handler+0x4>

08000612 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000612:	b480      	push	{r7}
 8000614:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000616:	e7fe      	b.n	8000616 <BusFault_Handler+0x4>

08000618 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000618:	b480      	push	{r7}
 800061a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800061c:	e7fe      	b.n	800061c <UsageFault_Handler+0x4>

0800061e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800061e:	b480      	push	{r7}
 8000620:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000622:	bf00      	nop
 8000624:	46bd      	mov	sp, r7
 8000626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800062a:	4770      	bx	lr

0800062c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800062c:	b480      	push	{r7}
 800062e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000630:	bf00      	nop
 8000632:	46bd      	mov	sp, r7
 8000634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000638:	4770      	bx	lr

0800063a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800063a:	b480      	push	{r7}
 800063c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800063e:	bf00      	nop
 8000640:	46bd      	mov	sp, r7
 8000642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000646:	4770      	bx	lr

08000648 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800064c:	f000 f8b4 	bl	80007b8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000650:	bf00      	nop
 8000652:	bd80      	pop	{r7, pc}

08000654 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000654:	b480      	push	{r7}
 8000656:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000658:	4b17      	ldr	r3, [pc, #92]	; (80006b8 <SystemInit+0x64>)
 800065a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800065e:	4a16      	ldr	r2, [pc, #88]	; (80006b8 <SystemInit+0x64>)
 8000660:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000664:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000668:	4b14      	ldr	r3, [pc, #80]	; (80006bc <SystemInit+0x68>)
 800066a:	681b      	ldr	r3, [r3, #0]
 800066c:	4a13      	ldr	r2, [pc, #76]	; (80006bc <SystemInit+0x68>)
 800066e:	f043 0301 	orr.w	r3, r3, #1
 8000672:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8000674:	4b11      	ldr	r3, [pc, #68]	; (80006bc <SystemInit+0x68>)
 8000676:	2200      	movs	r2, #0
 8000678:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 800067a:	4b10      	ldr	r3, [pc, #64]	; (80006bc <SystemInit+0x68>)
 800067c:	681b      	ldr	r3, [r3, #0]
 800067e:	4a0f      	ldr	r2, [pc, #60]	; (80006bc <SystemInit+0x68>)
 8000680:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8000684:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8000688:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 800068a:	4b0c      	ldr	r3, [pc, #48]	; (80006bc <SystemInit+0x68>)
 800068c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000690:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000692:	4b0a      	ldr	r3, [pc, #40]	; (80006bc <SystemInit+0x68>)
 8000694:	681b      	ldr	r3, [r3, #0]
 8000696:	4a09      	ldr	r2, [pc, #36]	; (80006bc <SystemInit+0x68>)
 8000698:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800069c:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 800069e:	4b07      	ldr	r3, [pc, #28]	; (80006bc <SystemInit+0x68>)
 80006a0:	2200      	movs	r2, #0
 80006a2:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80006a4:	4b04      	ldr	r3, [pc, #16]	; (80006b8 <SystemInit+0x64>)
 80006a6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80006aa:	609a      	str	r2, [r3, #8]
#endif
}
 80006ac:	bf00      	nop
 80006ae:	46bd      	mov	sp, r7
 80006b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b4:	4770      	bx	lr
 80006b6:	bf00      	nop
 80006b8:	e000ed00 	.word	0xe000ed00
 80006bc:	40021000 	.word	0x40021000

080006c0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80006c0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80006f8 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80006c4:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80006c6:	e003      	b.n	80006d0 <LoopCopyDataInit>

080006c8 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80006c8:	4b0c      	ldr	r3, [pc, #48]	; (80006fc <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80006ca:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80006cc:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80006ce:	3104      	adds	r1, #4

080006d0 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80006d0:	480b      	ldr	r0, [pc, #44]	; (8000700 <LoopForever+0xa>)
	ldr	r3, =_edata
 80006d2:	4b0c      	ldr	r3, [pc, #48]	; (8000704 <LoopForever+0xe>)
	adds	r2, r0, r1
 80006d4:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80006d6:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80006d8:	d3f6      	bcc.n	80006c8 <CopyDataInit>
	ldr	r2, =_sbss
 80006da:	4a0b      	ldr	r2, [pc, #44]	; (8000708 <LoopForever+0x12>)
	b	LoopFillZerobss
 80006dc:	e002      	b.n	80006e4 <LoopFillZerobss>

080006de <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80006de:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80006e0:	f842 3b04 	str.w	r3, [r2], #4

080006e4 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80006e4:	4b09      	ldr	r3, [pc, #36]	; (800070c <LoopForever+0x16>)
	cmp	r2, r3
 80006e6:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80006e8:	d3f9      	bcc.n	80006de <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80006ea:	f7ff ffb3 	bl	8000654 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80006ee:	f001 fe9f 	bl	8002430 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80006f2:	f7ff fdd3 	bl	800029c <main>

080006f6 <LoopForever>:

LoopForever:
    b LoopForever
 80006f6:	e7fe      	b.n	80006f6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80006f8:	20010000 	.word	0x20010000
	ldr	r3, =_sidata
 80006fc:	080024e8 	.word	0x080024e8
	ldr	r0, =_sdata
 8000700:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000704:	20000078 	.word	0x20000078
	ldr	r2, =_sbss
 8000708:	20000078 	.word	0x20000078
	ldr	r3, = _ebss
 800070c:	200000d8 	.word	0x200000d8

08000710 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000710:	e7fe      	b.n	8000710 <ADC1_IRQHandler>

08000712 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000712:	b580      	push	{r7, lr}
 8000714:	b082      	sub	sp, #8
 8000716:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000718:	2300      	movs	r3, #0
 800071a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800071c:	2003      	movs	r0, #3
 800071e:	f000 f93d 	bl	800099c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000722:	2000      	movs	r0, #0
 8000724:	f000 f80e 	bl	8000744 <HAL_InitTick>
 8000728:	4603      	mov	r3, r0
 800072a:	2b00      	cmp	r3, #0
 800072c:	d002      	beq.n	8000734 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800072e:	2301      	movs	r3, #1
 8000730:	71fb      	strb	r3, [r7, #7]
 8000732:	e001      	b.n	8000738 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000734:	f7ff feea 	bl	800050c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000738:	79fb      	ldrb	r3, [r7, #7]
}
 800073a:	4618      	mov	r0, r3
 800073c:	3708      	adds	r7, #8
 800073e:	46bd      	mov	sp, r7
 8000740:	bd80      	pop	{r7, pc}
	...

08000744 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	b084      	sub	sp, #16
 8000748:	af00      	add	r7, sp, #0
 800074a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800074c:	2300      	movs	r3, #0
 800074e:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000750:	4b16      	ldr	r3, [pc, #88]	; (80007ac <HAL_InitTick+0x68>)
 8000752:	681b      	ldr	r3, [r3, #0]
 8000754:	2b00      	cmp	r3, #0
 8000756:	d022      	beq.n	800079e <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000758:	4b15      	ldr	r3, [pc, #84]	; (80007b0 <HAL_InitTick+0x6c>)
 800075a:	681a      	ldr	r2, [r3, #0]
 800075c:	4b13      	ldr	r3, [pc, #76]	; (80007ac <HAL_InitTick+0x68>)
 800075e:	681b      	ldr	r3, [r3, #0]
 8000760:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000764:	fbb1 f3f3 	udiv	r3, r1, r3
 8000768:	fbb2 f3f3 	udiv	r3, r2, r3
 800076c:	4618      	mov	r0, r3
 800076e:	f000 f93c 	bl	80009ea <HAL_SYSTICK_Config>
 8000772:	4603      	mov	r3, r0
 8000774:	2b00      	cmp	r3, #0
 8000776:	d10f      	bne.n	8000798 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	2b0f      	cmp	r3, #15
 800077c:	d809      	bhi.n	8000792 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800077e:	2200      	movs	r2, #0
 8000780:	6879      	ldr	r1, [r7, #4]
 8000782:	f04f 30ff 	mov.w	r0, #4294967295
 8000786:	f000 f914 	bl	80009b2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800078a:	4a0a      	ldr	r2, [pc, #40]	; (80007b4 <HAL_InitTick+0x70>)
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	6013      	str	r3, [r2, #0]
 8000790:	e007      	b.n	80007a2 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000792:	2301      	movs	r3, #1
 8000794:	73fb      	strb	r3, [r7, #15]
 8000796:	e004      	b.n	80007a2 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000798:	2301      	movs	r3, #1
 800079a:	73fb      	strb	r3, [r7, #15]
 800079c:	e001      	b.n	80007a2 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800079e:	2301      	movs	r3, #1
 80007a0:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80007a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80007a4:	4618      	mov	r0, r3
 80007a6:	3710      	adds	r7, #16
 80007a8:	46bd      	mov	sp, r7
 80007aa:	bd80      	pop	{r7, pc}
 80007ac:	20000074 	.word	0x20000074
 80007b0:	2000006c 	.word	0x2000006c
 80007b4:	20000070 	.word	0x20000070

080007b8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80007b8:	b480      	push	{r7}
 80007ba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80007bc:	4b05      	ldr	r3, [pc, #20]	; (80007d4 <HAL_IncTick+0x1c>)
 80007be:	681a      	ldr	r2, [r3, #0]
 80007c0:	4b05      	ldr	r3, [pc, #20]	; (80007d8 <HAL_IncTick+0x20>)
 80007c2:	681b      	ldr	r3, [r3, #0]
 80007c4:	4413      	add	r3, r2
 80007c6:	4a03      	ldr	r2, [pc, #12]	; (80007d4 <HAL_IncTick+0x1c>)
 80007c8:	6013      	str	r3, [r2, #0]
}
 80007ca:	bf00      	nop
 80007cc:	46bd      	mov	sp, r7
 80007ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d2:	4770      	bx	lr
 80007d4:	200000d4 	.word	0x200000d4
 80007d8:	20000074 	.word	0x20000074

080007dc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80007dc:	b480      	push	{r7}
 80007de:	af00      	add	r7, sp, #0
  return uwTick;
 80007e0:	4b03      	ldr	r3, [pc, #12]	; (80007f0 <HAL_GetTick+0x14>)
 80007e2:	681b      	ldr	r3, [r3, #0]
}
 80007e4:	4618      	mov	r0, r3
 80007e6:	46bd      	mov	sp, r7
 80007e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ec:	4770      	bx	lr
 80007ee:	bf00      	nop
 80007f0:	200000d4 	.word	0x200000d4

080007f4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	b084      	sub	sp, #16
 80007f8:	af00      	add	r7, sp, #0
 80007fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80007fc:	f7ff ffee 	bl	80007dc <HAL_GetTick>
 8000800:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000802:	687b      	ldr	r3, [r7, #4]
 8000804:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000806:	68fb      	ldr	r3, [r7, #12]
 8000808:	f1b3 3fff 	cmp.w	r3, #4294967295
 800080c:	d004      	beq.n	8000818 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 800080e:	4b09      	ldr	r3, [pc, #36]	; (8000834 <HAL_Delay+0x40>)
 8000810:	681b      	ldr	r3, [r3, #0]
 8000812:	68fa      	ldr	r2, [r7, #12]
 8000814:	4413      	add	r3, r2
 8000816:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000818:	bf00      	nop
 800081a:	f7ff ffdf 	bl	80007dc <HAL_GetTick>
 800081e:	4602      	mov	r2, r0
 8000820:	68bb      	ldr	r3, [r7, #8]
 8000822:	1ad3      	subs	r3, r2, r3
 8000824:	68fa      	ldr	r2, [r7, #12]
 8000826:	429a      	cmp	r2, r3
 8000828:	d8f7      	bhi.n	800081a <HAL_Delay+0x26>
  {
  }
}
 800082a:	bf00      	nop
 800082c:	3710      	adds	r7, #16
 800082e:	46bd      	mov	sp, r7
 8000830:	bd80      	pop	{r7, pc}
 8000832:	bf00      	nop
 8000834:	20000074 	.word	0x20000074

08000838 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000838:	b480      	push	{r7}
 800083a:	b085      	sub	sp, #20
 800083c:	af00      	add	r7, sp, #0
 800083e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	f003 0307 	and.w	r3, r3, #7
 8000846:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000848:	4b0c      	ldr	r3, [pc, #48]	; (800087c <__NVIC_SetPriorityGrouping+0x44>)
 800084a:	68db      	ldr	r3, [r3, #12]
 800084c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800084e:	68ba      	ldr	r2, [r7, #8]
 8000850:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000854:	4013      	ands	r3, r2
 8000856:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000858:	68fb      	ldr	r3, [r7, #12]
 800085a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800085c:	68bb      	ldr	r3, [r7, #8]
 800085e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000860:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000864:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000868:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800086a:	4a04      	ldr	r2, [pc, #16]	; (800087c <__NVIC_SetPriorityGrouping+0x44>)
 800086c:	68bb      	ldr	r3, [r7, #8]
 800086e:	60d3      	str	r3, [r2, #12]
}
 8000870:	bf00      	nop
 8000872:	3714      	adds	r7, #20
 8000874:	46bd      	mov	sp, r7
 8000876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800087a:	4770      	bx	lr
 800087c:	e000ed00 	.word	0xe000ed00

08000880 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000880:	b480      	push	{r7}
 8000882:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000884:	4b04      	ldr	r3, [pc, #16]	; (8000898 <__NVIC_GetPriorityGrouping+0x18>)
 8000886:	68db      	ldr	r3, [r3, #12]
 8000888:	0a1b      	lsrs	r3, r3, #8
 800088a:	f003 0307 	and.w	r3, r3, #7
}
 800088e:	4618      	mov	r0, r3
 8000890:	46bd      	mov	sp, r7
 8000892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000896:	4770      	bx	lr
 8000898:	e000ed00 	.word	0xe000ed00

0800089c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800089c:	b480      	push	{r7}
 800089e:	b083      	sub	sp, #12
 80008a0:	af00      	add	r7, sp, #0
 80008a2:	4603      	mov	r3, r0
 80008a4:	6039      	str	r1, [r7, #0]
 80008a6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80008a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008ac:	2b00      	cmp	r3, #0
 80008ae:	db0a      	blt.n	80008c6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008b0:	683b      	ldr	r3, [r7, #0]
 80008b2:	b2da      	uxtb	r2, r3
 80008b4:	490c      	ldr	r1, [pc, #48]	; (80008e8 <__NVIC_SetPriority+0x4c>)
 80008b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008ba:	0112      	lsls	r2, r2, #4
 80008bc:	b2d2      	uxtb	r2, r2
 80008be:	440b      	add	r3, r1
 80008c0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80008c4:	e00a      	b.n	80008dc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008c6:	683b      	ldr	r3, [r7, #0]
 80008c8:	b2da      	uxtb	r2, r3
 80008ca:	4908      	ldr	r1, [pc, #32]	; (80008ec <__NVIC_SetPriority+0x50>)
 80008cc:	79fb      	ldrb	r3, [r7, #7]
 80008ce:	f003 030f 	and.w	r3, r3, #15
 80008d2:	3b04      	subs	r3, #4
 80008d4:	0112      	lsls	r2, r2, #4
 80008d6:	b2d2      	uxtb	r2, r2
 80008d8:	440b      	add	r3, r1
 80008da:	761a      	strb	r2, [r3, #24]
}
 80008dc:	bf00      	nop
 80008de:	370c      	adds	r7, #12
 80008e0:	46bd      	mov	sp, r7
 80008e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e6:	4770      	bx	lr
 80008e8:	e000e100 	.word	0xe000e100
 80008ec:	e000ed00 	.word	0xe000ed00

080008f0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80008f0:	b480      	push	{r7}
 80008f2:	b089      	sub	sp, #36	; 0x24
 80008f4:	af00      	add	r7, sp, #0
 80008f6:	60f8      	str	r0, [r7, #12]
 80008f8:	60b9      	str	r1, [r7, #8]
 80008fa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80008fc:	68fb      	ldr	r3, [r7, #12]
 80008fe:	f003 0307 	and.w	r3, r3, #7
 8000902:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000904:	69fb      	ldr	r3, [r7, #28]
 8000906:	f1c3 0307 	rsb	r3, r3, #7
 800090a:	2b04      	cmp	r3, #4
 800090c:	bf28      	it	cs
 800090e:	2304      	movcs	r3, #4
 8000910:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000912:	69fb      	ldr	r3, [r7, #28]
 8000914:	3304      	adds	r3, #4
 8000916:	2b06      	cmp	r3, #6
 8000918:	d902      	bls.n	8000920 <NVIC_EncodePriority+0x30>
 800091a:	69fb      	ldr	r3, [r7, #28]
 800091c:	3b03      	subs	r3, #3
 800091e:	e000      	b.n	8000922 <NVIC_EncodePriority+0x32>
 8000920:	2300      	movs	r3, #0
 8000922:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000924:	f04f 32ff 	mov.w	r2, #4294967295
 8000928:	69bb      	ldr	r3, [r7, #24]
 800092a:	fa02 f303 	lsl.w	r3, r2, r3
 800092e:	43da      	mvns	r2, r3
 8000930:	68bb      	ldr	r3, [r7, #8]
 8000932:	401a      	ands	r2, r3
 8000934:	697b      	ldr	r3, [r7, #20]
 8000936:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000938:	f04f 31ff 	mov.w	r1, #4294967295
 800093c:	697b      	ldr	r3, [r7, #20]
 800093e:	fa01 f303 	lsl.w	r3, r1, r3
 8000942:	43d9      	mvns	r1, r3
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000948:	4313      	orrs	r3, r2
         );
}
 800094a:	4618      	mov	r0, r3
 800094c:	3724      	adds	r7, #36	; 0x24
 800094e:	46bd      	mov	sp, r7
 8000950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000954:	4770      	bx	lr
	...

08000958 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	b082      	sub	sp, #8
 800095c:	af00      	add	r7, sp, #0
 800095e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	3b01      	subs	r3, #1
 8000964:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000968:	d301      	bcc.n	800096e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800096a:	2301      	movs	r3, #1
 800096c:	e00f      	b.n	800098e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800096e:	4a0a      	ldr	r2, [pc, #40]	; (8000998 <SysTick_Config+0x40>)
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	3b01      	subs	r3, #1
 8000974:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000976:	210f      	movs	r1, #15
 8000978:	f04f 30ff 	mov.w	r0, #4294967295
 800097c:	f7ff ff8e 	bl	800089c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000980:	4b05      	ldr	r3, [pc, #20]	; (8000998 <SysTick_Config+0x40>)
 8000982:	2200      	movs	r2, #0
 8000984:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000986:	4b04      	ldr	r3, [pc, #16]	; (8000998 <SysTick_Config+0x40>)
 8000988:	2207      	movs	r2, #7
 800098a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800098c:	2300      	movs	r3, #0
}
 800098e:	4618      	mov	r0, r3
 8000990:	3708      	adds	r7, #8
 8000992:	46bd      	mov	sp, r7
 8000994:	bd80      	pop	{r7, pc}
 8000996:	bf00      	nop
 8000998:	e000e010 	.word	0xe000e010

0800099c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	b082      	sub	sp, #8
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80009a4:	6878      	ldr	r0, [r7, #4]
 80009a6:	f7ff ff47 	bl	8000838 <__NVIC_SetPriorityGrouping>
}
 80009aa:	bf00      	nop
 80009ac:	3708      	adds	r7, #8
 80009ae:	46bd      	mov	sp, r7
 80009b0:	bd80      	pop	{r7, pc}

080009b2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80009b2:	b580      	push	{r7, lr}
 80009b4:	b086      	sub	sp, #24
 80009b6:	af00      	add	r7, sp, #0
 80009b8:	4603      	mov	r3, r0
 80009ba:	60b9      	str	r1, [r7, #8]
 80009bc:	607a      	str	r2, [r7, #4]
 80009be:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80009c0:	2300      	movs	r3, #0
 80009c2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80009c4:	f7ff ff5c 	bl	8000880 <__NVIC_GetPriorityGrouping>
 80009c8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80009ca:	687a      	ldr	r2, [r7, #4]
 80009cc:	68b9      	ldr	r1, [r7, #8]
 80009ce:	6978      	ldr	r0, [r7, #20]
 80009d0:	f7ff ff8e 	bl	80008f0 <NVIC_EncodePriority>
 80009d4:	4602      	mov	r2, r0
 80009d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80009da:	4611      	mov	r1, r2
 80009dc:	4618      	mov	r0, r3
 80009de:	f7ff ff5d 	bl	800089c <__NVIC_SetPriority>
}
 80009e2:	bf00      	nop
 80009e4:	3718      	adds	r7, #24
 80009e6:	46bd      	mov	sp, r7
 80009e8:	bd80      	pop	{r7, pc}

080009ea <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80009ea:	b580      	push	{r7, lr}
 80009ec:	b082      	sub	sp, #8
 80009ee:	af00      	add	r7, sp, #0
 80009f0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80009f2:	6878      	ldr	r0, [r7, #4]
 80009f4:	f7ff ffb0 	bl	8000958 <SysTick_Config>
 80009f8:	4603      	mov	r3, r0
}
 80009fa:	4618      	mov	r0, r3
 80009fc:	3708      	adds	r7, #8
 80009fe:	46bd      	mov	sp, r7
 8000a00:	bd80      	pop	{r7, pc}
	...

08000a04 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000a04:	b480      	push	{r7}
 8000a06:	b087      	sub	sp, #28
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	6078      	str	r0, [r7, #4]
 8000a0c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000a0e:	2300      	movs	r3, #0
 8000a10:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000a12:	e148      	b.n	8000ca6 <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000a14:	683b      	ldr	r3, [r7, #0]
 8000a16:	681a      	ldr	r2, [r3, #0]
 8000a18:	2101      	movs	r1, #1
 8000a1a:	697b      	ldr	r3, [r7, #20]
 8000a1c:	fa01 f303 	lsl.w	r3, r1, r3
 8000a20:	4013      	ands	r3, r2
 8000a22:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000a24:	68fb      	ldr	r3, [r7, #12]
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	f000 813a 	beq.w	8000ca0 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000a2c:	683b      	ldr	r3, [r7, #0]
 8000a2e:	685b      	ldr	r3, [r3, #4]
 8000a30:	2b01      	cmp	r3, #1
 8000a32:	d00b      	beq.n	8000a4c <HAL_GPIO_Init+0x48>
 8000a34:	683b      	ldr	r3, [r7, #0]
 8000a36:	685b      	ldr	r3, [r3, #4]
 8000a38:	2b02      	cmp	r3, #2
 8000a3a:	d007      	beq.n	8000a4c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000a3c:	683b      	ldr	r3, [r7, #0]
 8000a3e:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000a40:	2b11      	cmp	r3, #17
 8000a42:	d003      	beq.n	8000a4c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000a44:	683b      	ldr	r3, [r7, #0]
 8000a46:	685b      	ldr	r3, [r3, #4]
 8000a48:	2b12      	cmp	r3, #18
 8000a4a:	d130      	bne.n	8000aae <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	689b      	ldr	r3, [r3, #8]
 8000a50:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000a52:	697b      	ldr	r3, [r7, #20]
 8000a54:	005b      	lsls	r3, r3, #1
 8000a56:	2203      	movs	r2, #3
 8000a58:	fa02 f303 	lsl.w	r3, r2, r3
 8000a5c:	43db      	mvns	r3, r3
 8000a5e:	693a      	ldr	r2, [r7, #16]
 8000a60:	4013      	ands	r3, r2
 8000a62:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000a64:	683b      	ldr	r3, [r7, #0]
 8000a66:	68da      	ldr	r2, [r3, #12]
 8000a68:	697b      	ldr	r3, [r7, #20]
 8000a6a:	005b      	lsls	r3, r3, #1
 8000a6c:	fa02 f303 	lsl.w	r3, r2, r3
 8000a70:	693a      	ldr	r2, [r7, #16]
 8000a72:	4313      	orrs	r3, r2
 8000a74:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	693a      	ldr	r2, [r7, #16]
 8000a7a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	685b      	ldr	r3, [r3, #4]
 8000a80:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000a82:	2201      	movs	r2, #1
 8000a84:	697b      	ldr	r3, [r7, #20]
 8000a86:	fa02 f303 	lsl.w	r3, r2, r3
 8000a8a:	43db      	mvns	r3, r3
 8000a8c:	693a      	ldr	r2, [r7, #16]
 8000a8e:	4013      	ands	r3, r2
 8000a90:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8000a92:	683b      	ldr	r3, [r7, #0]
 8000a94:	685b      	ldr	r3, [r3, #4]
 8000a96:	091b      	lsrs	r3, r3, #4
 8000a98:	f003 0201 	and.w	r2, r3, #1
 8000a9c:	697b      	ldr	r3, [r7, #20]
 8000a9e:	fa02 f303 	lsl.w	r3, r2, r3
 8000aa2:	693a      	ldr	r2, [r7, #16]
 8000aa4:	4313      	orrs	r3, r2
 8000aa6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	693a      	ldr	r2, [r7, #16]
 8000aac:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	68db      	ldr	r3, [r3, #12]
 8000ab2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8000ab4:	697b      	ldr	r3, [r7, #20]
 8000ab6:	005b      	lsls	r3, r3, #1
 8000ab8:	2203      	movs	r2, #3
 8000aba:	fa02 f303 	lsl.w	r3, r2, r3
 8000abe:	43db      	mvns	r3, r3
 8000ac0:	693a      	ldr	r2, [r7, #16]
 8000ac2:	4013      	ands	r3, r2
 8000ac4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000ac6:	683b      	ldr	r3, [r7, #0]
 8000ac8:	689a      	ldr	r2, [r3, #8]
 8000aca:	697b      	ldr	r3, [r7, #20]
 8000acc:	005b      	lsls	r3, r3, #1
 8000ace:	fa02 f303 	lsl.w	r3, r2, r3
 8000ad2:	693a      	ldr	r2, [r7, #16]
 8000ad4:	4313      	orrs	r3, r2
 8000ad6:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	693a      	ldr	r2, [r7, #16]
 8000adc:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000ade:	683b      	ldr	r3, [r7, #0]
 8000ae0:	685b      	ldr	r3, [r3, #4]
 8000ae2:	2b02      	cmp	r3, #2
 8000ae4:	d003      	beq.n	8000aee <HAL_GPIO_Init+0xea>
 8000ae6:	683b      	ldr	r3, [r7, #0]
 8000ae8:	685b      	ldr	r3, [r3, #4]
 8000aea:	2b12      	cmp	r3, #18
 8000aec:	d123      	bne.n	8000b36 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000aee:	697b      	ldr	r3, [r7, #20]
 8000af0:	08da      	lsrs	r2, r3, #3
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	3208      	adds	r2, #8
 8000af6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000afa:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000afc:	697b      	ldr	r3, [r7, #20]
 8000afe:	f003 0307 	and.w	r3, r3, #7
 8000b02:	009b      	lsls	r3, r3, #2
 8000b04:	220f      	movs	r2, #15
 8000b06:	fa02 f303 	lsl.w	r3, r2, r3
 8000b0a:	43db      	mvns	r3, r3
 8000b0c:	693a      	ldr	r2, [r7, #16]
 8000b0e:	4013      	ands	r3, r2
 8000b10:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000b12:	683b      	ldr	r3, [r7, #0]
 8000b14:	691a      	ldr	r2, [r3, #16]
 8000b16:	697b      	ldr	r3, [r7, #20]
 8000b18:	f003 0307 	and.w	r3, r3, #7
 8000b1c:	009b      	lsls	r3, r3, #2
 8000b1e:	fa02 f303 	lsl.w	r3, r2, r3
 8000b22:	693a      	ldr	r2, [r7, #16]
 8000b24:	4313      	orrs	r3, r2
 8000b26:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000b28:	697b      	ldr	r3, [r7, #20]
 8000b2a:	08da      	lsrs	r2, r3, #3
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	3208      	adds	r2, #8
 8000b30:	6939      	ldr	r1, [r7, #16]
 8000b32:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	681b      	ldr	r3, [r3, #0]
 8000b3a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000b3c:	697b      	ldr	r3, [r7, #20]
 8000b3e:	005b      	lsls	r3, r3, #1
 8000b40:	2203      	movs	r2, #3
 8000b42:	fa02 f303 	lsl.w	r3, r2, r3
 8000b46:	43db      	mvns	r3, r3
 8000b48:	693a      	ldr	r2, [r7, #16]
 8000b4a:	4013      	ands	r3, r2
 8000b4c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000b4e:	683b      	ldr	r3, [r7, #0]
 8000b50:	685b      	ldr	r3, [r3, #4]
 8000b52:	f003 0203 	and.w	r2, r3, #3
 8000b56:	697b      	ldr	r3, [r7, #20]
 8000b58:	005b      	lsls	r3, r3, #1
 8000b5a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b5e:	693a      	ldr	r2, [r7, #16]
 8000b60:	4313      	orrs	r3, r2
 8000b62:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	693a      	ldr	r2, [r7, #16]
 8000b68:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000b6a:	683b      	ldr	r3, [r7, #0]
 8000b6c:	685b      	ldr	r3, [r3, #4]
 8000b6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	f000 8094 	beq.w	8000ca0 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b78:	4b52      	ldr	r3, [pc, #328]	; (8000cc4 <HAL_GPIO_Init+0x2c0>)
 8000b7a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b7c:	4a51      	ldr	r2, [pc, #324]	; (8000cc4 <HAL_GPIO_Init+0x2c0>)
 8000b7e:	f043 0301 	orr.w	r3, r3, #1
 8000b82:	6613      	str	r3, [r2, #96]	; 0x60
 8000b84:	4b4f      	ldr	r3, [pc, #316]	; (8000cc4 <HAL_GPIO_Init+0x2c0>)
 8000b86:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b88:	f003 0301 	and.w	r3, r3, #1
 8000b8c:	60bb      	str	r3, [r7, #8]
 8000b8e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000b90:	4a4d      	ldr	r2, [pc, #308]	; (8000cc8 <HAL_GPIO_Init+0x2c4>)
 8000b92:	697b      	ldr	r3, [r7, #20]
 8000b94:	089b      	lsrs	r3, r3, #2
 8000b96:	3302      	adds	r3, #2
 8000b98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b9c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000b9e:	697b      	ldr	r3, [r7, #20]
 8000ba0:	f003 0303 	and.w	r3, r3, #3
 8000ba4:	009b      	lsls	r3, r3, #2
 8000ba6:	220f      	movs	r2, #15
 8000ba8:	fa02 f303 	lsl.w	r3, r2, r3
 8000bac:	43db      	mvns	r3, r3
 8000bae:	693a      	ldr	r2, [r7, #16]
 8000bb0:	4013      	ands	r3, r2
 8000bb2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000bba:	d00d      	beq.n	8000bd8 <HAL_GPIO_Init+0x1d4>
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	4a43      	ldr	r2, [pc, #268]	; (8000ccc <HAL_GPIO_Init+0x2c8>)
 8000bc0:	4293      	cmp	r3, r2
 8000bc2:	d007      	beq.n	8000bd4 <HAL_GPIO_Init+0x1d0>
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	4a42      	ldr	r2, [pc, #264]	; (8000cd0 <HAL_GPIO_Init+0x2cc>)
 8000bc8:	4293      	cmp	r3, r2
 8000bca:	d101      	bne.n	8000bd0 <HAL_GPIO_Init+0x1cc>
 8000bcc:	2302      	movs	r3, #2
 8000bce:	e004      	b.n	8000bda <HAL_GPIO_Init+0x1d6>
 8000bd0:	2307      	movs	r3, #7
 8000bd2:	e002      	b.n	8000bda <HAL_GPIO_Init+0x1d6>
 8000bd4:	2301      	movs	r3, #1
 8000bd6:	e000      	b.n	8000bda <HAL_GPIO_Init+0x1d6>
 8000bd8:	2300      	movs	r3, #0
 8000bda:	697a      	ldr	r2, [r7, #20]
 8000bdc:	f002 0203 	and.w	r2, r2, #3
 8000be0:	0092      	lsls	r2, r2, #2
 8000be2:	4093      	lsls	r3, r2
 8000be4:	693a      	ldr	r2, [r7, #16]
 8000be6:	4313      	orrs	r3, r2
 8000be8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000bea:	4937      	ldr	r1, [pc, #220]	; (8000cc8 <HAL_GPIO_Init+0x2c4>)
 8000bec:	697b      	ldr	r3, [r7, #20]
 8000bee:	089b      	lsrs	r3, r3, #2
 8000bf0:	3302      	adds	r3, #2
 8000bf2:	693a      	ldr	r2, [r7, #16]
 8000bf4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8000bf8:	4b36      	ldr	r3, [pc, #216]	; (8000cd4 <HAL_GPIO_Init+0x2d0>)
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000bfe:	68fb      	ldr	r3, [r7, #12]
 8000c00:	43db      	mvns	r3, r3
 8000c02:	693a      	ldr	r2, [r7, #16]
 8000c04:	4013      	ands	r3, r2
 8000c06:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000c08:	683b      	ldr	r3, [r7, #0]
 8000c0a:	685b      	ldr	r3, [r3, #4]
 8000c0c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	d003      	beq.n	8000c1c <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8000c14:	693a      	ldr	r2, [r7, #16]
 8000c16:	68fb      	ldr	r3, [r7, #12]
 8000c18:	4313      	orrs	r3, r2
 8000c1a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000c1c:	4a2d      	ldr	r2, [pc, #180]	; (8000cd4 <HAL_GPIO_Init+0x2d0>)
 8000c1e:	693b      	ldr	r3, [r7, #16]
 8000c20:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8000c22:	4b2c      	ldr	r3, [pc, #176]	; (8000cd4 <HAL_GPIO_Init+0x2d0>)
 8000c24:	685b      	ldr	r3, [r3, #4]
 8000c26:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c28:	68fb      	ldr	r3, [r7, #12]
 8000c2a:	43db      	mvns	r3, r3
 8000c2c:	693a      	ldr	r2, [r7, #16]
 8000c2e:	4013      	ands	r3, r2
 8000c30:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000c32:	683b      	ldr	r3, [r7, #0]
 8000c34:	685b      	ldr	r3, [r3, #4]
 8000c36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d003      	beq.n	8000c46 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8000c3e:	693a      	ldr	r2, [r7, #16]
 8000c40:	68fb      	ldr	r3, [r7, #12]
 8000c42:	4313      	orrs	r3, r2
 8000c44:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000c46:	4a23      	ldr	r2, [pc, #140]	; (8000cd4 <HAL_GPIO_Init+0x2d0>)
 8000c48:	693b      	ldr	r3, [r7, #16]
 8000c4a:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000c4c:	4b21      	ldr	r3, [pc, #132]	; (8000cd4 <HAL_GPIO_Init+0x2d0>)
 8000c4e:	689b      	ldr	r3, [r3, #8]
 8000c50:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c52:	68fb      	ldr	r3, [r7, #12]
 8000c54:	43db      	mvns	r3, r3
 8000c56:	693a      	ldr	r2, [r7, #16]
 8000c58:	4013      	ands	r3, r2
 8000c5a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000c5c:	683b      	ldr	r3, [r7, #0]
 8000c5e:	685b      	ldr	r3, [r3, #4]
 8000c60:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	d003      	beq.n	8000c70 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8000c68:	693a      	ldr	r2, [r7, #16]
 8000c6a:	68fb      	ldr	r3, [r7, #12]
 8000c6c:	4313      	orrs	r3, r2
 8000c6e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000c70:	4a18      	ldr	r2, [pc, #96]	; (8000cd4 <HAL_GPIO_Init+0x2d0>)
 8000c72:	693b      	ldr	r3, [r7, #16]
 8000c74:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000c76:	4b17      	ldr	r3, [pc, #92]	; (8000cd4 <HAL_GPIO_Init+0x2d0>)
 8000c78:	68db      	ldr	r3, [r3, #12]
 8000c7a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c7c:	68fb      	ldr	r3, [r7, #12]
 8000c7e:	43db      	mvns	r3, r3
 8000c80:	693a      	ldr	r2, [r7, #16]
 8000c82:	4013      	ands	r3, r2
 8000c84:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000c86:	683b      	ldr	r3, [r7, #0]
 8000c88:	685b      	ldr	r3, [r3, #4]
 8000c8a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d003      	beq.n	8000c9a <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 8000c92:	693a      	ldr	r2, [r7, #16]
 8000c94:	68fb      	ldr	r3, [r7, #12]
 8000c96:	4313      	orrs	r3, r2
 8000c98:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000c9a:	4a0e      	ldr	r2, [pc, #56]	; (8000cd4 <HAL_GPIO_Init+0x2d0>)
 8000c9c:	693b      	ldr	r3, [r7, #16]
 8000c9e:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8000ca0:	697b      	ldr	r3, [r7, #20]
 8000ca2:	3301      	adds	r3, #1
 8000ca4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000ca6:	683b      	ldr	r3, [r7, #0]
 8000ca8:	681a      	ldr	r2, [r3, #0]
 8000caa:	697b      	ldr	r3, [r7, #20]
 8000cac:	fa22 f303 	lsr.w	r3, r2, r3
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	f47f aeaf 	bne.w	8000a14 <HAL_GPIO_Init+0x10>
  }
}
 8000cb6:	bf00      	nop
 8000cb8:	371c      	adds	r7, #28
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc0:	4770      	bx	lr
 8000cc2:	bf00      	nop
 8000cc4:	40021000 	.word	0x40021000
 8000cc8:	40010000 	.word	0x40010000
 8000ccc:	48000400 	.word	0x48000400
 8000cd0:	48000800 	.word	0x48000800
 8000cd4:	40010400 	.word	0x40010400

08000cd8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8000cd8:	b480      	push	{r7}
 8000cda:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8000cdc:	4b04      	ldr	r3, [pc, #16]	; (8000cf0 <HAL_PWREx_GetVoltageRange+0x18>)
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8000ce4:	4618      	mov	r0, r3
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cec:	4770      	bx	lr
 8000cee:	bf00      	nop
 8000cf0:	40007000 	.word	0x40007000

08000cf4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000cf4:	b480      	push	{r7}
 8000cf6:	b085      	sub	sp, #20
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000d02:	d130      	bne.n	8000d66 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8000d04:	4b23      	ldr	r3, [pc, #140]	; (8000d94 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000d0c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000d10:	d038      	beq.n	8000d84 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000d12:	4b20      	ldr	r3, [pc, #128]	; (8000d94 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000d1a:	4a1e      	ldr	r2, [pc, #120]	; (8000d94 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000d1c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d20:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8000d22:	4b1d      	ldr	r3, [pc, #116]	; (8000d98 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	2232      	movs	r2, #50	; 0x32
 8000d28:	fb02 f303 	mul.w	r3, r2, r3
 8000d2c:	4a1b      	ldr	r2, [pc, #108]	; (8000d9c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8000d2e:	fba2 2303 	umull	r2, r3, r2, r3
 8000d32:	0c9b      	lsrs	r3, r3, #18
 8000d34:	3301      	adds	r3, #1
 8000d36:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000d38:	e002      	b.n	8000d40 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8000d3a:	68fb      	ldr	r3, [r7, #12]
 8000d3c:	3b01      	subs	r3, #1
 8000d3e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000d40:	4b14      	ldr	r3, [pc, #80]	; (8000d94 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000d42:	695b      	ldr	r3, [r3, #20]
 8000d44:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000d48:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000d4c:	d102      	bne.n	8000d54 <HAL_PWREx_ControlVoltageScaling+0x60>
 8000d4e:	68fb      	ldr	r3, [r7, #12]
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d1f2      	bne.n	8000d3a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000d54:	4b0f      	ldr	r3, [pc, #60]	; (8000d94 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000d56:	695b      	ldr	r3, [r3, #20]
 8000d58:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000d5c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000d60:	d110      	bne.n	8000d84 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8000d62:	2303      	movs	r3, #3
 8000d64:	e00f      	b.n	8000d86 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8000d66:	4b0b      	ldr	r3, [pc, #44]	; (8000d94 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000d6e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000d72:	d007      	beq.n	8000d84 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8000d74:	4b07      	ldr	r3, [pc, #28]	; (8000d94 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000d7c:	4a05      	ldr	r2, [pc, #20]	; (8000d94 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000d7e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000d82:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8000d84:	2300      	movs	r3, #0
}
 8000d86:	4618      	mov	r0, r3
 8000d88:	3714      	adds	r7, #20
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d90:	4770      	bx	lr
 8000d92:	bf00      	nop
 8000d94:	40007000 	.word	0x40007000
 8000d98:	2000006c 	.word	0x2000006c
 8000d9c:	431bde83 	.word	0x431bde83

08000da0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b088      	sub	sp, #32
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d102      	bne.n	8000db4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8000dae:	2301      	movs	r3, #1
 8000db0:	f000 bc11 	b.w	80015d6 <HAL_RCC_OscConfig+0x836>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000db4:	4ba0      	ldr	r3, [pc, #640]	; (8001038 <HAL_RCC_OscConfig+0x298>)
 8000db6:	689b      	ldr	r3, [r3, #8]
 8000db8:	f003 030c 	and.w	r3, r3, #12
 8000dbc:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000dbe:	4b9e      	ldr	r3, [pc, #632]	; (8001038 <HAL_RCC_OscConfig+0x298>)
 8000dc0:	68db      	ldr	r3, [r3, #12]
 8000dc2:	f003 0303 	and.w	r3, r3, #3
 8000dc6:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	f003 0310 	and.w	r3, r3, #16
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	f000 80e4 	beq.w	8000f9e <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8000dd6:	69bb      	ldr	r3, [r7, #24]
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d007      	beq.n	8000dec <HAL_RCC_OscConfig+0x4c>
 8000ddc:	69bb      	ldr	r3, [r7, #24]
 8000dde:	2b0c      	cmp	r3, #12
 8000de0:	f040 808b 	bne.w	8000efa <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8000de4:	697b      	ldr	r3, [r7, #20]
 8000de6:	2b01      	cmp	r3, #1
 8000de8:	f040 8087 	bne.w	8000efa <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000dec:	4b92      	ldr	r3, [pc, #584]	; (8001038 <HAL_RCC_OscConfig+0x298>)
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	f003 0302 	and.w	r3, r3, #2
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d005      	beq.n	8000e04 <HAL_RCC_OscConfig+0x64>
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	699b      	ldr	r3, [r3, #24]
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	d101      	bne.n	8000e04 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8000e00:	2301      	movs	r3, #1
 8000e02:	e3e8      	b.n	80015d6 <HAL_RCC_OscConfig+0x836>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	6a1a      	ldr	r2, [r3, #32]
 8000e08:	4b8b      	ldr	r3, [pc, #556]	; (8001038 <HAL_RCC_OscConfig+0x298>)
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	f003 0308 	and.w	r3, r3, #8
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d004      	beq.n	8000e1e <HAL_RCC_OscConfig+0x7e>
 8000e14:	4b88      	ldr	r3, [pc, #544]	; (8001038 <HAL_RCC_OscConfig+0x298>)
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000e1c:	e005      	b.n	8000e2a <HAL_RCC_OscConfig+0x8a>
 8000e1e:	4b86      	ldr	r3, [pc, #536]	; (8001038 <HAL_RCC_OscConfig+0x298>)
 8000e20:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000e24:	091b      	lsrs	r3, r3, #4
 8000e26:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000e2a:	4293      	cmp	r3, r2
 8000e2c:	d223      	bcs.n	8000e76 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	6a1b      	ldr	r3, [r3, #32]
 8000e32:	4618      	mov	r0, r3
 8000e34:	f000 fd40 	bl	80018b8 <RCC_SetFlashLatencyFromMSIRange>
 8000e38:	4603      	mov	r3, r0
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d001      	beq.n	8000e42 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8000e3e:	2301      	movs	r3, #1
 8000e40:	e3c9      	b.n	80015d6 <HAL_RCC_OscConfig+0x836>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000e42:	4b7d      	ldr	r3, [pc, #500]	; (8001038 <HAL_RCC_OscConfig+0x298>)
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	4a7c      	ldr	r2, [pc, #496]	; (8001038 <HAL_RCC_OscConfig+0x298>)
 8000e48:	f043 0308 	orr.w	r3, r3, #8
 8000e4c:	6013      	str	r3, [r2, #0]
 8000e4e:	4b7a      	ldr	r3, [pc, #488]	; (8001038 <HAL_RCC_OscConfig+0x298>)
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	6a1b      	ldr	r3, [r3, #32]
 8000e5a:	4977      	ldr	r1, [pc, #476]	; (8001038 <HAL_RCC_OscConfig+0x298>)
 8000e5c:	4313      	orrs	r3, r2
 8000e5e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000e60:	4b75      	ldr	r3, [pc, #468]	; (8001038 <HAL_RCC_OscConfig+0x298>)
 8000e62:	685b      	ldr	r3, [r3, #4]
 8000e64:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	69db      	ldr	r3, [r3, #28]
 8000e6c:	021b      	lsls	r3, r3, #8
 8000e6e:	4972      	ldr	r1, [pc, #456]	; (8001038 <HAL_RCC_OscConfig+0x298>)
 8000e70:	4313      	orrs	r3, r2
 8000e72:	604b      	str	r3, [r1, #4]
 8000e74:	e025      	b.n	8000ec2 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000e76:	4b70      	ldr	r3, [pc, #448]	; (8001038 <HAL_RCC_OscConfig+0x298>)
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	4a6f      	ldr	r2, [pc, #444]	; (8001038 <HAL_RCC_OscConfig+0x298>)
 8000e7c:	f043 0308 	orr.w	r3, r3, #8
 8000e80:	6013      	str	r3, [r2, #0]
 8000e82:	4b6d      	ldr	r3, [pc, #436]	; (8001038 <HAL_RCC_OscConfig+0x298>)
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	6a1b      	ldr	r3, [r3, #32]
 8000e8e:	496a      	ldr	r1, [pc, #424]	; (8001038 <HAL_RCC_OscConfig+0x298>)
 8000e90:	4313      	orrs	r3, r2
 8000e92:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000e94:	4b68      	ldr	r3, [pc, #416]	; (8001038 <HAL_RCC_OscConfig+0x298>)
 8000e96:	685b      	ldr	r3, [r3, #4]
 8000e98:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	69db      	ldr	r3, [r3, #28]
 8000ea0:	021b      	lsls	r3, r3, #8
 8000ea2:	4965      	ldr	r1, [pc, #404]	; (8001038 <HAL_RCC_OscConfig+0x298>)
 8000ea4:	4313      	orrs	r3, r2
 8000ea6:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8000ea8:	69bb      	ldr	r3, [r7, #24]
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d109      	bne.n	8000ec2 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	6a1b      	ldr	r3, [r3, #32]
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	f000 fd00 	bl	80018b8 <RCC_SetFlashLatencyFromMSIRange>
 8000eb8:	4603      	mov	r3, r0
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d001      	beq.n	8000ec2 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8000ebe:	2301      	movs	r3, #1
 8000ec0:	e389      	b.n	80015d6 <HAL_RCC_OscConfig+0x836>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8000ec2:	f000 fc6f 	bl	80017a4 <HAL_RCC_GetSysClockFreq>
 8000ec6:	4601      	mov	r1, r0
 8000ec8:	4b5b      	ldr	r3, [pc, #364]	; (8001038 <HAL_RCC_OscConfig+0x298>)
 8000eca:	689b      	ldr	r3, [r3, #8]
 8000ecc:	091b      	lsrs	r3, r3, #4
 8000ece:	f003 030f 	and.w	r3, r3, #15
 8000ed2:	4a5a      	ldr	r2, [pc, #360]	; (800103c <HAL_RCC_OscConfig+0x29c>)
 8000ed4:	5cd3      	ldrb	r3, [r2, r3]
 8000ed6:	f003 031f 	and.w	r3, r3, #31
 8000eda:	fa21 f303 	lsr.w	r3, r1, r3
 8000ede:	4a58      	ldr	r2, [pc, #352]	; (8001040 <HAL_RCC_OscConfig+0x2a0>)
 8000ee0:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8000ee2:	4b58      	ldr	r3, [pc, #352]	; (8001044 <HAL_RCC_OscConfig+0x2a4>)
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	4618      	mov	r0, r3
 8000ee8:	f7ff fc2c 	bl	8000744 <HAL_InitTick>
 8000eec:	4603      	mov	r3, r0
 8000eee:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8000ef0:	7bfb      	ldrb	r3, [r7, #15]
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d052      	beq.n	8000f9c <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8000ef6:	7bfb      	ldrb	r3, [r7, #15]
 8000ef8:	e36d      	b.n	80015d6 <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	699b      	ldr	r3, [r3, #24]
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d032      	beq.n	8000f68 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8000f02:	4b4d      	ldr	r3, [pc, #308]	; (8001038 <HAL_RCC_OscConfig+0x298>)
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	4a4c      	ldr	r2, [pc, #304]	; (8001038 <HAL_RCC_OscConfig+0x298>)
 8000f08:	f043 0301 	orr.w	r3, r3, #1
 8000f0c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8000f0e:	f7ff fc65 	bl	80007dc <HAL_GetTick>
 8000f12:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8000f14:	e008      	b.n	8000f28 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000f16:	f7ff fc61 	bl	80007dc <HAL_GetTick>
 8000f1a:	4602      	mov	r2, r0
 8000f1c:	693b      	ldr	r3, [r7, #16]
 8000f1e:	1ad3      	subs	r3, r2, r3
 8000f20:	2b02      	cmp	r3, #2
 8000f22:	d901      	bls.n	8000f28 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8000f24:	2303      	movs	r3, #3
 8000f26:	e356      	b.n	80015d6 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8000f28:	4b43      	ldr	r3, [pc, #268]	; (8001038 <HAL_RCC_OscConfig+0x298>)
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	f003 0302 	and.w	r3, r3, #2
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d0f0      	beq.n	8000f16 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000f34:	4b40      	ldr	r3, [pc, #256]	; (8001038 <HAL_RCC_OscConfig+0x298>)
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	4a3f      	ldr	r2, [pc, #252]	; (8001038 <HAL_RCC_OscConfig+0x298>)
 8000f3a:	f043 0308 	orr.w	r3, r3, #8
 8000f3e:	6013      	str	r3, [r2, #0]
 8000f40:	4b3d      	ldr	r3, [pc, #244]	; (8001038 <HAL_RCC_OscConfig+0x298>)
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	6a1b      	ldr	r3, [r3, #32]
 8000f4c:	493a      	ldr	r1, [pc, #232]	; (8001038 <HAL_RCC_OscConfig+0x298>)
 8000f4e:	4313      	orrs	r3, r2
 8000f50:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000f52:	4b39      	ldr	r3, [pc, #228]	; (8001038 <HAL_RCC_OscConfig+0x298>)
 8000f54:	685b      	ldr	r3, [r3, #4]
 8000f56:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	69db      	ldr	r3, [r3, #28]
 8000f5e:	021b      	lsls	r3, r3, #8
 8000f60:	4935      	ldr	r1, [pc, #212]	; (8001038 <HAL_RCC_OscConfig+0x298>)
 8000f62:	4313      	orrs	r3, r2
 8000f64:	604b      	str	r3, [r1, #4]
 8000f66:	e01a      	b.n	8000f9e <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8000f68:	4b33      	ldr	r3, [pc, #204]	; (8001038 <HAL_RCC_OscConfig+0x298>)
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	4a32      	ldr	r2, [pc, #200]	; (8001038 <HAL_RCC_OscConfig+0x298>)
 8000f6e:	f023 0301 	bic.w	r3, r3, #1
 8000f72:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8000f74:	f7ff fc32 	bl	80007dc <HAL_GetTick>
 8000f78:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8000f7a:	e008      	b.n	8000f8e <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000f7c:	f7ff fc2e 	bl	80007dc <HAL_GetTick>
 8000f80:	4602      	mov	r2, r0
 8000f82:	693b      	ldr	r3, [r7, #16]
 8000f84:	1ad3      	subs	r3, r2, r3
 8000f86:	2b02      	cmp	r3, #2
 8000f88:	d901      	bls.n	8000f8e <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8000f8a:	2303      	movs	r3, #3
 8000f8c:	e323      	b.n	80015d6 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8000f8e:	4b2a      	ldr	r3, [pc, #168]	; (8001038 <HAL_RCC_OscConfig+0x298>)
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	f003 0302 	and.w	r3, r3, #2
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d1f0      	bne.n	8000f7c <HAL_RCC_OscConfig+0x1dc>
 8000f9a:	e000      	b.n	8000f9e <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000f9c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	f003 0301 	and.w	r3, r3, #1
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d073      	beq.n	8001092 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8000faa:	69bb      	ldr	r3, [r7, #24]
 8000fac:	2b08      	cmp	r3, #8
 8000fae:	d005      	beq.n	8000fbc <HAL_RCC_OscConfig+0x21c>
 8000fb0:	69bb      	ldr	r3, [r7, #24]
 8000fb2:	2b0c      	cmp	r3, #12
 8000fb4:	d10e      	bne.n	8000fd4 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8000fb6:	697b      	ldr	r3, [r7, #20]
 8000fb8:	2b03      	cmp	r3, #3
 8000fba:	d10b      	bne.n	8000fd4 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000fbc:	4b1e      	ldr	r3, [pc, #120]	; (8001038 <HAL_RCC_OscConfig+0x298>)
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d063      	beq.n	8001090 <HAL_RCC_OscConfig+0x2f0>
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	685b      	ldr	r3, [r3, #4]
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d15f      	bne.n	8001090 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8000fd0:	2301      	movs	r3, #1
 8000fd2:	e300      	b.n	80015d6 <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	685b      	ldr	r3, [r3, #4]
 8000fd8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000fdc:	d106      	bne.n	8000fec <HAL_RCC_OscConfig+0x24c>
 8000fde:	4b16      	ldr	r3, [pc, #88]	; (8001038 <HAL_RCC_OscConfig+0x298>)
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	4a15      	ldr	r2, [pc, #84]	; (8001038 <HAL_RCC_OscConfig+0x298>)
 8000fe4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000fe8:	6013      	str	r3, [r2, #0]
 8000fea:	e01d      	b.n	8001028 <HAL_RCC_OscConfig+0x288>
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	685b      	ldr	r3, [r3, #4]
 8000ff0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000ff4:	d10c      	bne.n	8001010 <HAL_RCC_OscConfig+0x270>
 8000ff6:	4b10      	ldr	r3, [pc, #64]	; (8001038 <HAL_RCC_OscConfig+0x298>)
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	4a0f      	ldr	r2, [pc, #60]	; (8001038 <HAL_RCC_OscConfig+0x298>)
 8000ffc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001000:	6013      	str	r3, [r2, #0]
 8001002:	4b0d      	ldr	r3, [pc, #52]	; (8001038 <HAL_RCC_OscConfig+0x298>)
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	4a0c      	ldr	r2, [pc, #48]	; (8001038 <HAL_RCC_OscConfig+0x298>)
 8001008:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800100c:	6013      	str	r3, [r2, #0]
 800100e:	e00b      	b.n	8001028 <HAL_RCC_OscConfig+0x288>
 8001010:	4b09      	ldr	r3, [pc, #36]	; (8001038 <HAL_RCC_OscConfig+0x298>)
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	4a08      	ldr	r2, [pc, #32]	; (8001038 <HAL_RCC_OscConfig+0x298>)
 8001016:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800101a:	6013      	str	r3, [r2, #0]
 800101c:	4b06      	ldr	r3, [pc, #24]	; (8001038 <HAL_RCC_OscConfig+0x298>)
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	4a05      	ldr	r2, [pc, #20]	; (8001038 <HAL_RCC_OscConfig+0x298>)
 8001022:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001026:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	685b      	ldr	r3, [r3, #4]
 800102c:	2b00      	cmp	r3, #0
 800102e:	d01b      	beq.n	8001068 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001030:	f7ff fbd4 	bl	80007dc <HAL_GetTick>
 8001034:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001036:	e010      	b.n	800105a <HAL_RCC_OscConfig+0x2ba>
 8001038:	40021000 	.word	0x40021000
 800103c:	080024a0 	.word	0x080024a0
 8001040:	2000006c 	.word	0x2000006c
 8001044:	20000070 	.word	0x20000070
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001048:	f7ff fbc8 	bl	80007dc <HAL_GetTick>
 800104c:	4602      	mov	r2, r0
 800104e:	693b      	ldr	r3, [r7, #16]
 8001050:	1ad3      	subs	r3, r2, r3
 8001052:	2b64      	cmp	r3, #100	; 0x64
 8001054:	d901      	bls.n	800105a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001056:	2303      	movs	r3, #3
 8001058:	e2bd      	b.n	80015d6 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800105a:	4baf      	ldr	r3, [pc, #700]	; (8001318 <HAL_RCC_OscConfig+0x578>)
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001062:	2b00      	cmp	r3, #0
 8001064:	d0f0      	beq.n	8001048 <HAL_RCC_OscConfig+0x2a8>
 8001066:	e014      	b.n	8001092 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001068:	f7ff fbb8 	bl	80007dc <HAL_GetTick>
 800106c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800106e:	e008      	b.n	8001082 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001070:	f7ff fbb4 	bl	80007dc <HAL_GetTick>
 8001074:	4602      	mov	r2, r0
 8001076:	693b      	ldr	r3, [r7, #16]
 8001078:	1ad3      	subs	r3, r2, r3
 800107a:	2b64      	cmp	r3, #100	; 0x64
 800107c:	d901      	bls.n	8001082 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800107e:	2303      	movs	r3, #3
 8001080:	e2a9      	b.n	80015d6 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001082:	4ba5      	ldr	r3, [pc, #660]	; (8001318 <HAL_RCC_OscConfig+0x578>)
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800108a:	2b00      	cmp	r3, #0
 800108c:	d1f0      	bne.n	8001070 <HAL_RCC_OscConfig+0x2d0>
 800108e:	e000      	b.n	8001092 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001090:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	f003 0302 	and.w	r3, r3, #2
 800109a:	2b00      	cmp	r3, #0
 800109c:	d060      	beq.n	8001160 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800109e:	69bb      	ldr	r3, [r7, #24]
 80010a0:	2b04      	cmp	r3, #4
 80010a2:	d005      	beq.n	80010b0 <HAL_RCC_OscConfig+0x310>
 80010a4:	69bb      	ldr	r3, [r7, #24]
 80010a6:	2b0c      	cmp	r3, #12
 80010a8:	d119      	bne.n	80010de <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80010aa:	697b      	ldr	r3, [r7, #20]
 80010ac:	2b02      	cmp	r3, #2
 80010ae:	d116      	bne.n	80010de <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80010b0:	4b99      	ldr	r3, [pc, #612]	; (8001318 <HAL_RCC_OscConfig+0x578>)
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d005      	beq.n	80010c8 <HAL_RCC_OscConfig+0x328>
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	68db      	ldr	r3, [r3, #12]
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d101      	bne.n	80010c8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80010c4:	2301      	movs	r3, #1
 80010c6:	e286      	b.n	80015d6 <HAL_RCC_OscConfig+0x836>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80010c8:	4b93      	ldr	r3, [pc, #588]	; (8001318 <HAL_RCC_OscConfig+0x578>)
 80010ca:	685b      	ldr	r3, [r3, #4]
 80010cc:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	691b      	ldr	r3, [r3, #16]
 80010d4:	061b      	lsls	r3, r3, #24
 80010d6:	4990      	ldr	r1, [pc, #576]	; (8001318 <HAL_RCC_OscConfig+0x578>)
 80010d8:	4313      	orrs	r3, r2
 80010da:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80010dc:	e040      	b.n	8001160 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	68db      	ldr	r3, [r3, #12]
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d023      	beq.n	800112e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80010e6:	4b8c      	ldr	r3, [pc, #560]	; (8001318 <HAL_RCC_OscConfig+0x578>)
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	4a8b      	ldr	r2, [pc, #556]	; (8001318 <HAL_RCC_OscConfig+0x578>)
 80010ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010f0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80010f2:	f7ff fb73 	bl	80007dc <HAL_GetTick>
 80010f6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80010f8:	e008      	b.n	800110c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80010fa:	f7ff fb6f 	bl	80007dc <HAL_GetTick>
 80010fe:	4602      	mov	r2, r0
 8001100:	693b      	ldr	r3, [r7, #16]
 8001102:	1ad3      	subs	r3, r2, r3
 8001104:	2b02      	cmp	r3, #2
 8001106:	d901      	bls.n	800110c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001108:	2303      	movs	r3, #3
 800110a:	e264      	b.n	80015d6 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800110c:	4b82      	ldr	r3, [pc, #520]	; (8001318 <HAL_RCC_OscConfig+0x578>)
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001114:	2b00      	cmp	r3, #0
 8001116:	d0f0      	beq.n	80010fa <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001118:	4b7f      	ldr	r3, [pc, #508]	; (8001318 <HAL_RCC_OscConfig+0x578>)
 800111a:	685b      	ldr	r3, [r3, #4]
 800111c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	691b      	ldr	r3, [r3, #16]
 8001124:	061b      	lsls	r3, r3, #24
 8001126:	497c      	ldr	r1, [pc, #496]	; (8001318 <HAL_RCC_OscConfig+0x578>)
 8001128:	4313      	orrs	r3, r2
 800112a:	604b      	str	r3, [r1, #4]
 800112c:	e018      	b.n	8001160 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800112e:	4b7a      	ldr	r3, [pc, #488]	; (8001318 <HAL_RCC_OscConfig+0x578>)
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	4a79      	ldr	r2, [pc, #484]	; (8001318 <HAL_RCC_OscConfig+0x578>)
 8001134:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001138:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800113a:	f7ff fb4f 	bl	80007dc <HAL_GetTick>
 800113e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001140:	e008      	b.n	8001154 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001142:	f7ff fb4b 	bl	80007dc <HAL_GetTick>
 8001146:	4602      	mov	r2, r0
 8001148:	693b      	ldr	r3, [r7, #16]
 800114a:	1ad3      	subs	r3, r2, r3
 800114c:	2b02      	cmp	r3, #2
 800114e:	d901      	bls.n	8001154 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001150:	2303      	movs	r3, #3
 8001152:	e240      	b.n	80015d6 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001154:	4b70      	ldr	r3, [pc, #448]	; (8001318 <HAL_RCC_OscConfig+0x578>)
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800115c:	2b00      	cmp	r3, #0
 800115e:	d1f0      	bne.n	8001142 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	f003 0308 	and.w	r3, r3, #8
 8001168:	2b00      	cmp	r3, #0
 800116a:	d03c      	beq.n	80011e6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	695b      	ldr	r3, [r3, #20]
 8001170:	2b00      	cmp	r3, #0
 8001172:	d01c      	beq.n	80011ae <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001174:	4b68      	ldr	r3, [pc, #416]	; (8001318 <HAL_RCC_OscConfig+0x578>)
 8001176:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800117a:	4a67      	ldr	r2, [pc, #412]	; (8001318 <HAL_RCC_OscConfig+0x578>)
 800117c:	f043 0301 	orr.w	r3, r3, #1
 8001180:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001184:	f7ff fb2a 	bl	80007dc <HAL_GetTick>
 8001188:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800118a:	e008      	b.n	800119e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800118c:	f7ff fb26 	bl	80007dc <HAL_GetTick>
 8001190:	4602      	mov	r2, r0
 8001192:	693b      	ldr	r3, [r7, #16]
 8001194:	1ad3      	subs	r3, r2, r3
 8001196:	2b02      	cmp	r3, #2
 8001198:	d901      	bls.n	800119e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800119a:	2303      	movs	r3, #3
 800119c:	e21b      	b.n	80015d6 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800119e:	4b5e      	ldr	r3, [pc, #376]	; (8001318 <HAL_RCC_OscConfig+0x578>)
 80011a0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80011a4:	f003 0302 	and.w	r3, r3, #2
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d0ef      	beq.n	800118c <HAL_RCC_OscConfig+0x3ec>
 80011ac:	e01b      	b.n	80011e6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80011ae:	4b5a      	ldr	r3, [pc, #360]	; (8001318 <HAL_RCC_OscConfig+0x578>)
 80011b0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80011b4:	4a58      	ldr	r2, [pc, #352]	; (8001318 <HAL_RCC_OscConfig+0x578>)
 80011b6:	f023 0301 	bic.w	r3, r3, #1
 80011ba:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80011be:	f7ff fb0d 	bl	80007dc <HAL_GetTick>
 80011c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80011c4:	e008      	b.n	80011d8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80011c6:	f7ff fb09 	bl	80007dc <HAL_GetTick>
 80011ca:	4602      	mov	r2, r0
 80011cc:	693b      	ldr	r3, [r7, #16]
 80011ce:	1ad3      	subs	r3, r2, r3
 80011d0:	2b02      	cmp	r3, #2
 80011d2:	d901      	bls.n	80011d8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80011d4:	2303      	movs	r3, #3
 80011d6:	e1fe      	b.n	80015d6 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80011d8:	4b4f      	ldr	r3, [pc, #316]	; (8001318 <HAL_RCC_OscConfig+0x578>)
 80011da:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80011de:	f003 0302 	and.w	r3, r3, #2
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d1ef      	bne.n	80011c6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	f003 0304 	and.w	r3, r3, #4
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	f000 80a6 	beq.w	8001340 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80011f4:	2300      	movs	r3, #0
 80011f6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80011f8:	4b47      	ldr	r3, [pc, #284]	; (8001318 <HAL_RCC_OscConfig+0x578>)
 80011fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001200:	2b00      	cmp	r3, #0
 8001202:	d10d      	bne.n	8001220 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001204:	4b44      	ldr	r3, [pc, #272]	; (8001318 <HAL_RCC_OscConfig+0x578>)
 8001206:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001208:	4a43      	ldr	r2, [pc, #268]	; (8001318 <HAL_RCC_OscConfig+0x578>)
 800120a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800120e:	6593      	str	r3, [r2, #88]	; 0x58
 8001210:	4b41      	ldr	r3, [pc, #260]	; (8001318 <HAL_RCC_OscConfig+0x578>)
 8001212:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001214:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001218:	60bb      	str	r3, [r7, #8]
 800121a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800121c:	2301      	movs	r3, #1
 800121e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001220:	4b3e      	ldr	r3, [pc, #248]	; (800131c <HAL_RCC_OscConfig+0x57c>)
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001228:	2b00      	cmp	r3, #0
 800122a:	d118      	bne.n	800125e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800122c:	4b3b      	ldr	r3, [pc, #236]	; (800131c <HAL_RCC_OscConfig+0x57c>)
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	4a3a      	ldr	r2, [pc, #232]	; (800131c <HAL_RCC_OscConfig+0x57c>)
 8001232:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001236:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001238:	f7ff fad0 	bl	80007dc <HAL_GetTick>
 800123c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800123e:	e008      	b.n	8001252 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001240:	f7ff facc 	bl	80007dc <HAL_GetTick>
 8001244:	4602      	mov	r2, r0
 8001246:	693b      	ldr	r3, [r7, #16]
 8001248:	1ad3      	subs	r3, r2, r3
 800124a:	2b02      	cmp	r3, #2
 800124c:	d901      	bls.n	8001252 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800124e:	2303      	movs	r3, #3
 8001250:	e1c1      	b.n	80015d6 <HAL_RCC_OscConfig+0x836>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001252:	4b32      	ldr	r3, [pc, #200]	; (800131c <HAL_RCC_OscConfig+0x57c>)
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800125a:	2b00      	cmp	r3, #0
 800125c:	d0f0      	beq.n	8001240 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	689b      	ldr	r3, [r3, #8]
 8001262:	2b01      	cmp	r3, #1
 8001264:	d108      	bne.n	8001278 <HAL_RCC_OscConfig+0x4d8>
 8001266:	4b2c      	ldr	r3, [pc, #176]	; (8001318 <HAL_RCC_OscConfig+0x578>)
 8001268:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800126c:	4a2a      	ldr	r2, [pc, #168]	; (8001318 <HAL_RCC_OscConfig+0x578>)
 800126e:	f043 0301 	orr.w	r3, r3, #1
 8001272:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001276:	e024      	b.n	80012c2 <HAL_RCC_OscConfig+0x522>
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	689b      	ldr	r3, [r3, #8]
 800127c:	2b05      	cmp	r3, #5
 800127e:	d110      	bne.n	80012a2 <HAL_RCC_OscConfig+0x502>
 8001280:	4b25      	ldr	r3, [pc, #148]	; (8001318 <HAL_RCC_OscConfig+0x578>)
 8001282:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001286:	4a24      	ldr	r2, [pc, #144]	; (8001318 <HAL_RCC_OscConfig+0x578>)
 8001288:	f043 0304 	orr.w	r3, r3, #4
 800128c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001290:	4b21      	ldr	r3, [pc, #132]	; (8001318 <HAL_RCC_OscConfig+0x578>)
 8001292:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001296:	4a20      	ldr	r2, [pc, #128]	; (8001318 <HAL_RCC_OscConfig+0x578>)
 8001298:	f043 0301 	orr.w	r3, r3, #1
 800129c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80012a0:	e00f      	b.n	80012c2 <HAL_RCC_OscConfig+0x522>
 80012a2:	4b1d      	ldr	r3, [pc, #116]	; (8001318 <HAL_RCC_OscConfig+0x578>)
 80012a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80012a8:	4a1b      	ldr	r2, [pc, #108]	; (8001318 <HAL_RCC_OscConfig+0x578>)
 80012aa:	f023 0301 	bic.w	r3, r3, #1
 80012ae:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80012b2:	4b19      	ldr	r3, [pc, #100]	; (8001318 <HAL_RCC_OscConfig+0x578>)
 80012b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80012b8:	4a17      	ldr	r2, [pc, #92]	; (8001318 <HAL_RCC_OscConfig+0x578>)
 80012ba:	f023 0304 	bic.w	r3, r3, #4
 80012be:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	689b      	ldr	r3, [r3, #8]
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d016      	beq.n	80012f8 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80012ca:	f7ff fa87 	bl	80007dc <HAL_GetTick>
 80012ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80012d0:	e00a      	b.n	80012e8 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80012d2:	f7ff fa83 	bl	80007dc <HAL_GetTick>
 80012d6:	4602      	mov	r2, r0
 80012d8:	693b      	ldr	r3, [r7, #16]
 80012da:	1ad3      	subs	r3, r2, r3
 80012dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80012e0:	4293      	cmp	r3, r2
 80012e2:	d901      	bls.n	80012e8 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 80012e4:	2303      	movs	r3, #3
 80012e6:	e176      	b.n	80015d6 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80012e8:	4b0b      	ldr	r3, [pc, #44]	; (8001318 <HAL_RCC_OscConfig+0x578>)
 80012ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80012ee:	f003 0302 	and.w	r3, r3, #2
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d0ed      	beq.n	80012d2 <HAL_RCC_OscConfig+0x532>
 80012f6:	e01a      	b.n	800132e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80012f8:	f7ff fa70 	bl	80007dc <HAL_GetTick>
 80012fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80012fe:	e00f      	b.n	8001320 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001300:	f7ff fa6c 	bl	80007dc <HAL_GetTick>
 8001304:	4602      	mov	r2, r0
 8001306:	693b      	ldr	r3, [r7, #16]
 8001308:	1ad3      	subs	r3, r2, r3
 800130a:	f241 3288 	movw	r2, #5000	; 0x1388
 800130e:	4293      	cmp	r3, r2
 8001310:	d906      	bls.n	8001320 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001312:	2303      	movs	r3, #3
 8001314:	e15f      	b.n	80015d6 <HAL_RCC_OscConfig+0x836>
 8001316:	bf00      	nop
 8001318:	40021000 	.word	0x40021000
 800131c:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001320:	4baa      	ldr	r3, [pc, #680]	; (80015cc <HAL_RCC_OscConfig+0x82c>)
 8001322:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001326:	f003 0302 	and.w	r3, r3, #2
 800132a:	2b00      	cmp	r3, #0
 800132c:	d1e8      	bne.n	8001300 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800132e:	7ffb      	ldrb	r3, [r7, #31]
 8001330:	2b01      	cmp	r3, #1
 8001332:	d105      	bne.n	8001340 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001334:	4ba5      	ldr	r3, [pc, #660]	; (80015cc <HAL_RCC_OscConfig+0x82c>)
 8001336:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001338:	4aa4      	ldr	r2, [pc, #656]	; (80015cc <HAL_RCC_OscConfig+0x82c>)
 800133a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800133e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	f003 0320 	and.w	r3, r3, #32
 8001348:	2b00      	cmp	r3, #0
 800134a:	d03c      	beq.n	80013c6 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001350:	2b00      	cmp	r3, #0
 8001352:	d01c      	beq.n	800138e <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001354:	4b9d      	ldr	r3, [pc, #628]	; (80015cc <HAL_RCC_OscConfig+0x82c>)
 8001356:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800135a:	4a9c      	ldr	r2, [pc, #624]	; (80015cc <HAL_RCC_OscConfig+0x82c>)
 800135c:	f043 0301 	orr.w	r3, r3, #1
 8001360:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001364:	f7ff fa3a 	bl	80007dc <HAL_GetTick>
 8001368:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800136a:	e008      	b.n	800137e <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800136c:	f7ff fa36 	bl	80007dc <HAL_GetTick>
 8001370:	4602      	mov	r2, r0
 8001372:	693b      	ldr	r3, [r7, #16]
 8001374:	1ad3      	subs	r3, r2, r3
 8001376:	2b02      	cmp	r3, #2
 8001378:	d901      	bls.n	800137e <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800137a:	2303      	movs	r3, #3
 800137c:	e12b      	b.n	80015d6 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800137e:	4b93      	ldr	r3, [pc, #588]	; (80015cc <HAL_RCC_OscConfig+0x82c>)
 8001380:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001384:	f003 0302 	and.w	r3, r3, #2
 8001388:	2b00      	cmp	r3, #0
 800138a:	d0ef      	beq.n	800136c <HAL_RCC_OscConfig+0x5cc>
 800138c:	e01b      	b.n	80013c6 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800138e:	4b8f      	ldr	r3, [pc, #572]	; (80015cc <HAL_RCC_OscConfig+0x82c>)
 8001390:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001394:	4a8d      	ldr	r2, [pc, #564]	; (80015cc <HAL_RCC_OscConfig+0x82c>)
 8001396:	f023 0301 	bic.w	r3, r3, #1
 800139a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800139e:	f7ff fa1d 	bl	80007dc <HAL_GetTick>
 80013a2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80013a4:	e008      	b.n	80013b8 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80013a6:	f7ff fa19 	bl	80007dc <HAL_GetTick>
 80013aa:	4602      	mov	r2, r0
 80013ac:	693b      	ldr	r3, [r7, #16]
 80013ae:	1ad3      	subs	r3, r2, r3
 80013b0:	2b02      	cmp	r3, #2
 80013b2:	d901      	bls.n	80013b8 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80013b4:	2303      	movs	r3, #3
 80013b6:	e10e      	b.n	80015d6 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80013b8:	4b84      	ldr	r3, [pc, #528]	; (80015cc <HAL_RCC_OscConfig+0x82c>)
 80013ba:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80013be:	f003 0302 	and.w	r3, r3, #2
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d1ef      	bne.n	80013a6 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	f000 8102 	beq.w	80015d4 <HAL_RCC_OscConfig+0x834>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013d4:	2b02      	cmp	r3, #2
 80013d6:	f040 80c5 	bne.w	8001564 <HAL_RCC_OscConfig+0x7c4>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80013da:	4b7c      	ldr	r3, [pc, #496]	; (80015cc <HAL_RCC_OscConfig+0x82c>)
 80013dc:	68db      	ldr	r3, [r3, #12]
 80013de:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80013e0:	697b      	ldr	r3, [r7, #20]
 80013e2:	f003 0203 	and.w	r2, r3, #3
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013ea:	429a      	cmp	r2, r3
 80013ec:	d12c      	bne.n	8001448 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80013ee:	697b      	ldr	r3, [r7, #20]
 80013f0:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013f8:	3b01      	subs	r3, #1
 80013fa:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80013fc:	429a      	cmp	r2, r3
 80013fe:	d123      	bne.n	8001448 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001400:	697b      	ldr	r3, [r7, #20]
 8001402:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800140a:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800140c:	429a      	cmp	r2, r3
 800140e:	d11b      	bne.n	8001448 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001410:	697b      	ldr	r3, [r7, #20]
 8001412:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800141a:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800141c:	429a      	cmp	r2, r3
 800141e:	d113      	bne.n	8001448 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001420:	697b      	ldr	r3, [r7, #20]
 8001422:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800142a:	085b      	lsrs	r3, r3, #1
 800142c:	3b01      	subs	r3, #1
 800142e:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001430:	429a      	cmp	r2, r3
 8001432:	d109      	bne.n	8001448 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001434:	697b      	ldr	r3, [r7, #20]
 8001436:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800143e:	085b      	lsrs	r3, r3, #1
 8001440:	3b01      	subs	r3, #1
 8001442:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001444:	429a      	cmp	r2, r3
 8001446:	d067      	beq.n	8001518 <HAL_RCC_OscConfig+0x778>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001448:	69bb      	ldr	r3, [r7, #24]
 800144a:	2b0c      	cmp	r3, #12
 800144c:	d062      	beq.n	8001514 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800144e:	4b5f      	ldr	r3, [pc, #380]	; (80015cc <HAL_RCC_OscConfig+0x82c>)
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001456:	2b00      	cmp	r3, #0
 8001458:	d001      	beq.n	800145e <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 800145a:	2301      	movs	r3, #1
 800145c:	e0bb      	b.n	80015d6 <HAL_RCC_OscConfig+0x836>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800145e:	4b5b      	ldr	r3, [pc, #364]	; (80015cc <HAL_RCC_OscConfig+0x82c>)
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	4a5a      	ldr	r2, [pc, #360]	; (80015cc <HAL_RCC_OscConfig+0x82c>)
 8001464:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001468:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800146a:	f7ff f9b7 	bl	80007dc <HAL_GetTick>
 800146e:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001470:	e008      	b.n	8001484 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001472:	f7ff f9b3 	bl	80007dc <HAL_GetTick>
 8001476:	4602      	mov	r2, r0
 8001478:	693b      	ldr	r3, [r7, #16]
 800147a:	1ad3      	subs	r3, r2, r3
 800147c:	2b02      	cmp	r3, #2
 800147e:	d901      	bls.n	8001484 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8001480:	2303      	movs	r3, #3
 8001482:	e0a8      	b.n	80015d6 <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001484:	4b51      	ldr	r3, [pc, #324]	; (80015cc <HAL_RCC_OscConfig+0x82c>)
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800148c:	2b00      	cmp	r3, #0
 800148e:	d1f0      	bne.n	8001472 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001490:	4b4e      	ldr	r3, [pc, #312]	; (80015cc <HAL_RCC_OscConfig+0x82c>)
 8001492:	68da      	ldr	r2, [r3, #12]
 8001494:	4b4e      	ldr	r3, [pc, #312]	; (80015d0 <HAL_RCC_OscConfig+0x830>)
 8001496:	4013      	ands	r3, r2
 8001498:	687a      	ldr	r2, [r7, #4]
 800149a:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800149c:	687a      	ldr	r2, [r7, #4]
 800149e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80014a0:	3a01      	subs	r2, #1
 80014a2:	0112      	lsls	r2, r2, #4
 80014a4:	4311      	orrs	r1, r2
 80014a6:	687a      	ldr	r2, [r7, #4]
 80014a8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80014aa:	0212      	lsls	r2, r2, #8
 80014ac:	4311      	orrs	r1, r2
 80014ae:	687a      	ldr	r2, [r7, #4]
 80014b0:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80014b2:	0852      	lsrs	r2, r2, #1
 80014b4:	3a01      	subs	r2, #1
 80014b6:	0552      	lsls	r2, r2, #21
 80014b8:	4311      	orrs	r1, r2
 80014ba:	687a      	ldr	r2, [r7, #4]
 80014bc:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80014be:	0852      	lsrs	r2, r2, #1
 80014c0:	3a01      	subs	r2, #1
 80014c2:	0652      	lsls	r2, r2, #25
 80014c4:	4311      	orrs	r1, r2
 80014c6:	687a      	ldr	r2, [r7, #4]
 80014c8:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80014ca:	06d2      	lsls	r2, r2, #27
 80014cc:	430a      	orrs	r2, r1
 80014ce:	493f      	ldr	r1, [pc, #252]	; (80015cc <HAL_RCC_OscConfig+0x82c>)
 80014d0:	4313      	orrs	r3, r2
 80014d2:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80014d4:	4b3d      	ldr	r3, [pc, #244]	; (80015cc <HAL_RCC_OscConfig+0x82c>)
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	4a3c      	ldr	r2, [pc, #240]	; (80015cc <HAL_RCC_OscConfig+0x82c>)
 80014da:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80014de:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80014e0:	4b3a      	ldr	r3, [pc, #232]	; (80015cc <HAL_RCC_OscConfig+0x82c>)
 80014e2:	68db      	ldr	r3, [r3, #12]
 80014e4:	4a39      	ldr	r2, [pc, #228]	; (80015cc <HAL_RCC_OscConfig+0x82c>)
 80014e6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80014ea:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80014ec:	f7ff f976 	bl	80007dc <HAL_GetTick>
 80014f0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80014f2:	e008      	b.n	8001506 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80014f4:	f7ff f972 	bl	80007dc <HAL_GetTick>
 80014f8:	4602      	mov	r2, r0
 80014fa:	693b      	ldr	r3, [r7, #16]
 80014fc:	1ad3      	subs	r3, r2, r3
 80014fe:	2b02      	cmp	r3, #2
 8001500:	d901      	bls.n	8001506 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8001502:	2303      	movs	r3, #3
 8001504:	e067      	b.n	80015d6 <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001506:	4b31      	ldr	r3, [pc, #196]	; (80015cc <HAL_RCC_OscConfig+0x82c>)
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800150e:	2b00      	cmp	r3, #0
 8001510:	d0f0      	beq.n	80014f4 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001512:	e05f      	b.n	80015d4 <HAL_RCC_OscConfig+0x834>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001514:	2301      	movs	r3, #1
 8001516:	e05e      	b.n	80015d6 <HAL_RCC_OscConfig+0x836>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001518:	4b2c      	ldr	r3, [pc, #176]	; (80015cc <HAL_RCC_OscConfig+0x82c>)
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001520:	2b00      	cmp	r3, #0
 8001522:	d157      	bne.n	80015d4 <HAL_RCC_OscConfig+0x834>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001524:	4b29      	ldr	r3, [pc, #164]	; (80015cc <HAL_RCC_OscConfig+0x82c>)
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	4a28      	ldr	r2, [pc, #160]	; (80015cc <HAL_RCC_OscConfig+0x82c>)
 800152a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800152e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001530:	4b26      	ldr	r3, [pc, #152]	; (80015cc <HAL_RCC_OscConfig+0x82c>)
 8001532:	68db      	ldr	r3, [r3, #12]
 8001534:	4a25      	ldr	r2, [pc, #148]	; (80015cc <HAL_RCC_OscConfig+0x82c>)
 8001536:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800153a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800153c:	f7ff f94e 	bl	80007dc <HAL_GetTick>
 8001540:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001542:	e008      	b.n	8001556 <HAL_RCC_OscConfig+0x7b6>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001544:	f7ff f94a 	bl	80007dc <HAL_GetTick>
 8001548:	4602      	mov	r2, r0
 800154a:	693b      	ldr	r3, [r7, #16]
 800154c:	1ad3      	subs	r3, r2, r3
 800154e:	2b02      	cmp	r3, #2
 8001550:	d901      	bls.n	8001556 <HAL_RCC_OscConfig+0x7b6>
            {
              return HAL_TIMEOUT;
 8001552:	2303      	movs	r3, #3
 8001554:	e03f      	b.n	80015d6 <HAL_RCC_OscConfig+0x836>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001556:	4b1d      	ldr	r3, [pc, #116]	; (80015cc <HAL_RCC_OscConfig+0x82c>)
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800155e:	2b00      	cmp	r3, #0
 8001560:	d0f0      	beq.n	8001544 <HAL_RCC_OscConfig+0x7a4>
 8001562:	e037      	b.n	80015d4 <HAL_RCC_OscConfig+0x834>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001564:	69bb      	ldr	r3, [r7, #24]
 8001566:	2b0c      	cmp	r3, #12
 8001568:	d02d      	beq.n	80015c6 <HAL_RCC_OscConfig+0x826>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800156a:	4b18      	ldr	r3, [pc, #96]	; (80015cc <HAL_RCC_OscConfig+0x82c>)
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	4a17      	ldr	r2, [pc, #92]	; (80015cc <HAL_RCC_OscConfig+0x82c>)
 8001570:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001574:	6013      	str	r3, [r2, #0]
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
        }
#elif defined(RCC_PLLSAI1_SUPPORT)
        if(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8001576:	4b15      	ldr	r3, [pc, #84]	; (80015cc <HAL_RCC_OscConfig+0x82c>)
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800157e:	2b00      	cmp	r3, #0
 8001580:	d105      	bne.n	800158e <HAL_RCC_OscConfig+0x7ee>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8001582:	4b12      	ldr	r3, [pc, #72]	; (80015cc <HAL_RCC_OscConfig+0x82c>)
 8001584:	68db      	ldr	r3, [r3, #12]
 8001586:	4a11      	ldr	r2, [pc, #68]	; (80015cc <HAL_RCC_OscConfig+0x82c>)
 8001588:	f023 0303 	bic.w	r3, r3, #3
 800158c:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 800158e:	4b0f      	ldr	r3, [pc, #60]	; (80015cc <HAL_RCC_OscConfig+0x82c>)
 8001590:	68db      	ldr	r3, [r3, #12]
 8001592:	4a0e      	ldr	r2, [pc, #56]	; (80015cc <HAL_RCC_OscConfig+0x82c>)
 8001594:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8001598:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800159c:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800159e:	f7ff f91d 	bl	80007dc <HAL_GetTick>
 80015a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80015a4:	e008      	b.n	80015b8 <HAL_RCC_OscConfig+0x818>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80015a6:	f7ff f919 	bl	80007dc <HAL_GetTick>
 80015aa:	4602      	mov	r2, r0
 80015ac:	693b      	ldr	r3, [r7, #16]
 80015ae:	1ad3      	subs	r3, r2, r3
 80015b0:	2b02      	cmp	r3, #2
 80015b2:	d901      	bls.n	80015b8 <HAL_RCC_OscConfig+0x818>
          {
            return HAL_TIMEOUT;
 80015b4:	2303      	movs	r3, #3
 80015b6:	e00e      	b.n	80015d6 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80015b8:	4b04      	ldr	r3, [pc, #16]	; (80015cc <HAL_RCC_OscConfig+0x82c>)
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d1f0      	bne.n	80015a6 <HAL_RCC_OscConfig+0x806>
 80015c4:	e006      	b.n	80015d4 <HAL_RCC_OscConfig+0x834>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80015c6:	2301      	movs	r3, #1
 80015c8:	e005      	b.n	80015d6 <HAL_RCC_OscConfig+0x836>
 80015ca:	bf00      	nop
 80015cc:	40021000 	.word	0x40021000
 80015d0:	019d808c 	.word	0x019d808c
      }
    }
  }
  return HAL_OK;
 80015d4:	2300      	movs	r3, #0
}
 80015d6:	4618      	mov	r0, r3
 80015d8:	3720      	adds	r7, #32
 80015da:	46bd      	mov	sp, r7
 80015dc:	bd80      	pop	{r7, pc}
 80015de:	bf00      	nop

080015e0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b084      	sub	sp, #16
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]
 80015e8:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d101      	bne.n	80015f4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80015f0:	2301      	movs	r3, #1
 80015f2:	e0c8      	b.n	8001786 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80015f4:	4b66      	ldr	r3, [pc, #408]	; (8001790 <HAL_RCC_ClockConfig+0x1b0>)
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	f003 0307 	and.w	r3, r3, #7
 80015fc:	683a      	ldr	r2, [r7, #0]
 80015fe:	429a      	cmp	r2, r3
 8001600:	d910      	bls.n	8001624 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001602:	4b63      	ldr	r3, [pc, #396]	; (8001790 <HAL_RCC_ClockConfig+0x1b0>)
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	f023 0207 	bic.w	r2, r3, #7
 800160a:	4961      	ldr	r1, [pc, #388]	; (8001790 <HAL_RCC_ClockConfig+0x1b0>)
 800160c:	683b      	ldr	r3, [r7, #0]
 800160e:	4313      	orrs	r3, r2
 8001610:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001612:	4b5f      	ldr	r3, [pc, #380]	; (8001790 <HAL_RCC_ClockConfig+0x1b0>)
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	f003 0307 	and.w	r3, r3, #7
 800161a:	683a      	ldr	r2, [r7, #0]
 800161c:	429a      	cmp	r2, r3
 800161e:	d001      	beq.n	8001624 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001620:	2301      	movs	r3, #1
 8001622:	e0b0      	b.n	8001786 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	f003 0301 	and.w	r3, r3, #1
 800162c:	2b00      	cmp	r3, #0
 800162e:	d04c      	beq.n	80016ca <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	685b      	ldr	r3, [r3, #4]
 8001634:	2b03      	cmp	r3, #3
 8001636:	d107      	bne.n	8001648 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001638:	4b56      	ldr	r3, [pc, #344]	; (8001794 <HAL_RCC_ClockConfig+0x1b4>)
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001640:	2b00      	cmp	r3, #0
 8001642:	d121      	bne.n	8001688 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8001644:	2301      	movs	r3, #1
 8001646:	e09e      	b.n	8001786 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	685b      	ldr	r3, [r3, #4]
 800164c:	2b02      	cmp	r3, #2
 800164e:	d107      	bne.n	8001660 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001650:	4b50      	ldr	r3, [pc, #320]	; (8001794 <HAL_RCC_ClockConfig+0x1b4>)
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001658:	2b00      	cmp	r3, #0
 800165a:	d115      	bne.n	8001688 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800165c:	2301      	movs	r3, #1
 800165e:	e092      	b.n	8001786 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	685b      	ldr	r3, [r3, #4]
 8001664:	2b00      	cmp	r3, #0
 8001666:	d107      	bne.n	8001678 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001668:	4b4a      	ldr	r3, [pc, #296]	; (8001794 <HAL_RCC_ClockConfig+0x1b4>)
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	f003 0302 	and.w	r3, r3, #2
 8001670:	2b00      	cmp	r3, #0
 8001672:	d109      	bne.n	8001688 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001674:	2301      	movs	r3, #1
 8001676:	e086      	b.n	8001786 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001678:	4b46      	ldr	r3, [pc, #280]	; (8001794 <HAL_RCC_ClockConfig+0x1b4>)
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001680:	2b00      	cmp	r3, #0
 8001682:	d101      	bne.n	8001688 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001684:	2301      	movs	r3, #1
 8001686:	e07e      	b.n	8001786 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001688:	4b42      	ldr	r3, [pc, #264]	; (8001794 <HAL_RCC_ClockConfig+0x1b4>)
 800168a:	689b      	ldr	r3, [r3, #8]
 800168c:	f023 0203 	bic.w	r2, r3, #3
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	685b      	ldr	r3, [r3, #4]
 8001694:	493f      	ldr	r1, [pc, #252]	; (8001794 <HAL_RCC_ClockConfig+0x1b4>)
 8001696:	4313      	orrs	r3, r2
 8001698:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800169a:	f7ff f89f 	bl	80007dc <HAL_GetTick>
 800169e:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80016a0:	e00a      	b.n	80016b8 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80016a2:	f7ff f89b 	bl	80007dc <HAL_GetTick>
 80016a6:	4602      	mov	r2, r0
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	1ad3      	subs	r3, r2, r3
 80016ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80016b0:	4293      	cmp	r3, r2
 80016b2:	d901      	bls.n	80016b8 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 80016b4:	2303      	movs	r3, #3
 80016b6:	e066      	b.n	8001786 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80016b8:	4b36      	ldr	r3, [pc, #216]	; (8001794 <HAL_RCC_ClockConfig+0x1b4>)
 80016ba:	689b      	ldr	r3, [r3, #8]
 80016bc:	f003 020c 	and.w	r2, r3, #12
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	685b      	ldr	r3, [r3, #4]
 80016c4:	009b      	lsls	r3, r3, #2
 80016c6:	429a      	cmp	r2, r3
 80016c8:	d1eb      	bne.n	80016a2 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	f003 0302 	and.w	r3, r3, #2
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d008      	beq.n	80016e8 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80016d6:	4b2f      	ldr	r3, [pc, #188]	; (8001794 <HAL_RCC_ClockConfig+0x1b4>)
 80016d8:	689b      	ldr	r3, [r3, #8]
 80016da:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	689b      	ldr	r3, [r3, #8]
 80016e2:	492c      	ldr	r1, [pc, #176]	; (8001794 <HAL_RCC_ClockConfig+0x1b4>)
 80016e4:	4313      	orrs	r3, r2
 80016e6:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80016e8:	4b29      	ldr	r3, [pc, #164]	; (8001790 <HAL_RCC_ClockConfig+0x1b0>)
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	f003 0307 	and.w	r3, r3, #7
 80016f0:	683a      	ldr	r2, [r7, #0]
 80016f2:	429a      	cmp	r2, r3
 80016f4:	d210      	bcs.n	8001718 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80016f6:	4b26      	ldr	r3, [pc, #152]	; (8001790 <HAL_RCC_ClockConfig+0x1b0>)
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	f023 0207 	bic.w	r2, r3, #7
 80016fe:	4924      	ldr	r1, [pc, #144]	; (8001790 <HAL_RCC_ClockConfig+0x1b0>)
 8001700:	683b      	ldr	r3, [r7, #0]
 8001702:	4313      	orrs	r3, r2
 8001704:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001706:	4b22      	ldr	r3, [pc, #136]	; (8001790 <HAL_RCC_ClockConfig+0x1b0>)
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	f003 0307 	and.w	r3, r3, #7
 800170e:	683a      	ldr	r2, [r7, #0]
 8001710:	429a      	cmp	r2, r3
 8001712:	d001      	beq.n	8001718 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8001714:	2301      	movs	r3, #1
 8001716:	e036      	b.n	8001786 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	f003 0304 	and.w	r3, r3, #4
 8001720:	2b00      	cmp	r3, #0
 8001722:	d008      	beq.n	8001736 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001724:	4b1b      	ldr	r3, [pc, #108]	; (8001794 <HAL_RCC_ClockConfig+0x1b4>)
 8001726:	689b      	ldr	r3, [r3, #8]
 8001728:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	68db      	ldr	r3, [r3, #12]
 8001730:	4918      	ldr	r1, [pc, #96]	; (8001794 <HAL_RCC_ClockConfig+0x1b4>)
 8001732:	4313      	orrs	r3, r2
 8001734:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	f003 0308 	and.w	r3, r3, #8
 800173e:	2b00      	cmp	r3, #0
 8001740:	d009      	beq.n	8001756 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001742:	4b14      	ldr	r3, [pc, #80]	; (8001794 <HAL_RCC_ClockConfig+0x1b4>)
 8001744:	689b      	ldr	r3, [r3, #8]
 8001746:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	691b      	ldr	r3, [r3, #16]
 800174e:	00db      	lsls	r3, r3, #3
 8001750:	4910      	ldr	r1, [pc, #64]	; (8001794 <HAL_RCC_ClockConfig+0x1b4>)
 8001752:	4313      	orrs	r3, r2
 8001754:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001756:	f000 f825 	bl	80017a4 <HAL_RCC_GetSysClockFreq>
 800175a:	4601      	mov	r1, r0
 800175c:	4b0d      	ldr	r3, [pc, #52]	; (8001794 <HAL_RCC_ClockConfig+0x1b4>)
 800175e:	689b      	ldr	r3, [r3, #8]
 8001760:	091b      	lsrs	r3, r3, #4
 8001762:	f003 030f 	and.w	r3, r3, #15
 8001766:	4a0c      	ldr	r2, [pc, #48]	; (8001798 <HAL_RCC_ClockConfig+0x1b8>)
 8001768:	5cd3      	ldrb	r3, [r2, r3]
 800176a:	f003 031f 	and.w	r3, r3, #31
 800176e:	fa21 f303 	lsr.w	r3, r1, r3
 8001772:	4a0a      	ldr	r2, [pc, #40]	; (800179c <HAL_RCC_ClockConfig+0x1bc>)
 8001774:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001776:	4b0a      	ldr	r3, [pc, #40]	; (80017a0 <HAL_RCC_ClockConfig+0x1c0>)
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	4618      	mov	r0, r3
 800177c:	f7fe ffe2 	bl	8000744 <HAL_InitTick>
 8001780:	4603      	mov	r3, r0
 8001782:	72fb      	strb	r3, [r7, #11]

  return status;
 8001784:	7afb      	ldrb	r3, [r7, #11]
}
 8001786:	4618      	mov	r0, r3
 8001788:	3710      	adds	r7, #16
 800178a:	46bd      	mov	sp, r7
 800178c:	bd80      	pop	{r7, pc}
 800178e:	bf00      	nop
 8001790:	40022000 	.word	0x40022000
 8001794:	40021000 	.word	0x40021000
 8001798:	080024a0 	.word	0x080024a0
 800179c:	2000006c 	.word	0x2000006c
 80017a0:	20000070 	.word	0x20000070

080017a4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80017a4:	b480      	push	{r7}
 80017a6:	b089      	sub	sp, #36	; 0x24
 80017a8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80017aa:	2300      	movs	r3, #0
 80017ac:	61fb      	str	r3, [r7, #28]
 80017ae:	2300      	movs	r3, #0
 80017b0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80017b2:	4b3d      	ldr	r3, [pc, #244]	; (80018a8 <HAL_RCC_GetSysClockFreq+0x104>)
 80017b4:	689b      	ldr	r3, [r3, #8]
 80017b6:	f003 030c 	and.w	r3, r3, #12
 80017ba:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80017bc:	4b3a      	ldr	r3, [pc, #232]	; (80018a8 <HAL_RCC_GetSysClockFreq+0x104>)
 80017be:	68db      	ldr	r3, [r3, #12]
 80017c0:	f003 0303 	and.w	r3, r3, #3
 80017c4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80017c6:	693b      	ldr	r3, [r7, #16]
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d005      	beq.n	80017d8 <HAL_RCC_GetSysClockFreq+0x34>
 80017cc:	693b      	ldr	r3, [r7, #16]
 80017ce:	2b0c      	cmp	r3, #12
 80017d0:	d121      	bne.n	8001816 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	2b01      	cmp	r3, #1
 80017d6:	d11e      	bne.n	8001816 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80017d8:	4b33      	ldr	r3, [pc, #204]	; (80018a8 <HAL_RCC_GetSysClockFreq+0x104>)
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	f003 0308 	and.w	r3, r3, #8
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d107      	bne.n	80017f4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80017e4:	4b30      	ldr	r3, [pc, #192]	; (80018a8 <HAL_RCC_GetSysClockFreq+0x104>)
 80017e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80017ea:	0a1b      	lsrs	r3, r3, #8
 80017ec:	f003 030f 	and.w	r3, r3, #15
 80017f0:	61fb      	str	r3, [r7, #28]
 80017f2:	e005      	b.n	8001800 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80017f4:	4b2c      	ldr	r3, [pc, #176]	; (80018a8 <HAL_RCC_GetSysClockFreq+0x104>)
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	091b      	lsrs	r3, r3, #4
 80017fa:	f003 030f 	and.w	r3, r3, #15
 80017fe:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001800:	4a2a      	ldr	r2, [pc, #168]	; (80018ac <HAL_RCC_GetSysClockFreq+0x108>)
 8001802:	69fb      	ldr	r3, [r7, #28]
 8001804:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001808:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800180a:	693b      	ldr	r3, [r7, #16]
 800180c:	2b00      	cmp	r3, #0
 800180e:	d10d      	bne.n	800182c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001810:	69fb      	ldr	r3, [r7, #28]
 8001812:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001814:	e00a      	b.n	800182c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001816:	693b      	ldr	r3, [r7, #16]
 8001818:	2b04      	cmp	r3, #4
 800181a:	d102      	bne.n	8001822 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800181c:	4b24      	ldr	r3, [pc, #144]	; (80018b0 <HAL_RCC_GetSysClockFreq+0x10c>)
 800181e:	61bb      	str	r3, [r7, #24]
 8001820:	e004      	b.n	800182c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001822:	693b      	ldr	r3, [r7, #16]
 8001824:	2b08      	cmp	r3, #8
 8001826:	d101      	bne.n	800182c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001828:	4b22      	ldr	r3, [pc, #136]	; (80018b4 <HAL_RCC_GetSysClockFreq+0x110>)
 800182a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800182c:	693b      	ldr	r3, [r7, #16]
 800182e:	2b0c      	cmp	r3, #12
 8001830:	d133      	bne.n	800189a <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001832:	4b1d      	ldr	r3, [pc, #116]	; (80018a8 <HAL_RCC_GetSysClockFreq+0x104>)
 8001834:	68db      	ldr	r3, [r3, #12]
 8001836:	f003 0303 	and.w	r3, r3, #3
 800183a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800183c:	68bb      	ldr	r3, [r7, #8]
 800183e:	2b02      	cmp	r3, #2
 8001840:	d002      	beq.n	8001848 <HAL_RCC_GetSysClockFreq+0xa4>
 8001842:	2b03      	cmp	r3, #3
 8001844:	d003      	beq.n	800184e <HAL_RCC_GetSysClockFreq+0xaa>
 8001846:	e005      	b.n	8001854 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001848:	4b19      	ldr	r3, [pc, #100]	; (80018b0 <HAL_RCC_GetSysClockFreq+0x10c>)
 800184a:	617b      	str	r3, [r7, #20]
      break;
 800184c:	e005      	b.n	800185a <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800184e:	4b19      	ldr	r3, [pc, #100]	; (80018b4 <HAL_RCC_GetSysClockFreq+0x110>)
 8001850:	617b      	str	r3, [r7, #20]
      break;
 8001852:	e002      	b.n	800185a <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001854:	69fb      	ldr	r3, [r7, #28]
 8001856:	617b      	str	r3, [r7, #20]
      break;
 8001858:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800185a:	4b13      	ldr	r3, [pc, #76]	; (80018a8 <HAL_RCC_GetSysClockFreq+0x104>)
 800185c:	68db      	ldr	r3, [r3, #12]
 800185e:	091b      	lsrs	r3, r3, #4
 8001860:	f003 0307 	and.w	r3, r3, #7
 8001864:	3301      	adds	r3, #1
 8001866:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001868:	4b0f      	ldr	r3, [pc, #60]	; (80018a8 <HAL_RCC_GetSysClockFreq+0x104>)
 800186a:	68db      	ldr	r3, [r3, #12]
 800186c:	0a1b      	lsrs	r3, r3, #8
 800186e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001872:	697a      	ldr	r2, [r7, #20]
 8001874:	fb02 f203 	mul.w	r2, r2, r3
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	fbb2 f3f3 	udiv	r3, r2, r3
 800187e:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001880:	4b09      	ldr	r3, [pc, #36]	; (80018a8 <HAL_RCC_GetSysClockFreq+0x104>)
 8001882:	68db      	ldr	r3, [r3, #12]
 8001884:	0e5b      	lsrs	r3, r3, #25
 8001886:	f003 0303 	and.w	r3, r3, #3
 800188a:	3301      	adds	r3, #1
 800188c:	005b      	lsls	r3, r3, #1
 800188e:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001890:	697a      	ldr	r2, [r7, #20]
 8001892:	683b      	ldr	r3, [r7, #0]
 8001894:	fbb2 f3f3 	udiv	r3, r2, r3
 8001898:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800189a:	69bb      	ldr	r3, [r7, #24]
}
 800189c:	4618      	mov	r0, r3
 800189e:	3724      	adds	r7, #36	; 0x24
 80018a0:	46bd      	mov	sp, r7
 80018a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a6:	4770      	bx	lr
 80018a8:	40021000 	.word	0x40021000
 80018ac:	080024b0 	.word	0x080024b0
 80018b0:	00f42400 	.word	0x00f42400
 80018b4:	007a1200 	.word	0x007a1200

080018b8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b086      	sub	sp, #24
 80018bc:	af00      	add	r7, sp, #0
 80018be:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80018c0:	2300      	movs	r3, #0
 80018c2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80018c4:	4b2a      	ldr	r3, [pc, #168]	; (8001970 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80018c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d003      	beq.n	80018d8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80018d0:	f7ff fa02 	bl	8000cd8 <HAL_PWREx_GetVoltageRange>
 80018d4:	6178      	str	r0, [r7, #20]
 80018d6:	e014      	b.n	8001902 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80018d8:	4b25      	ldr	r3, [pc, #148]	; (8001970 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80018da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018dc:	4a24      	ldr	r2, [pc, #144]	; (8001970 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80018de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018e2:	6593      	str	r3, [r2, #88]	; 0x58
 80018e4:	4b22      	ldr	r3, [pc, #136]	; (8001970 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80018e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018ec:	60fb      	str	r3, [r7, #12]
 80018ee:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80018f0:	f7ff f9f2 	bl	8000cd8 <HAL_PWREx_GetVoltageRange>
 80018f4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80018f6:	4b1e      	ldr	r3, [pc, #120]	; (8001970 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80018f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018fa:	4a1d      	ldr	r2, [pc, #116]	; (8001970 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80018fc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001900:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001902:	697b      	ldr	r3, [r7, #20]
 8001904:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001908:	d10b      	bne.n	8001922 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	2b80      	cmp	r3, #128	; 0x80
 800190e:	d919      	bls.n	8001944 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	2ba0      	cmp	r3, #160	; 0xa0
 8001914:	d902      	bls.n	800191c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001916:	2302      	movs	r3, #2
 8001918:	613b      	str	r3, [r7, #16]
 800191a:	e013      	b.n	8001944 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800191c:	2301      	movs	r3, #1
 800191e:	613b      	str	r3, [r7, #16]
 8001920:	e010      	b.n	8001944 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	2b80      	cmp	r3, #128	; 0x80
 8001926:	d902      	bls.n	800192e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001928:	2303      	movs	r3, #3
 800192a:	613b      	str	r3, [r7, #16]
 800192c:	e00a      	b.n	8001944 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	2b80      	cmp	r3, #128	; 0x80
 8001932:	d102      	bne.n	800193a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001934:	2302      	movs	r3, #2
 8001936:	613b      	str	r3, [r7, #16]
 8001938:	e004      	b.n	8001944 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	2b70      	cmp	r3, #112	; 0x70
 800193e:	d101      	bne.n	8001944 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001940:	2301      	movs	r3, #1
 8001942:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001944:	4b0b      	ldr	r3, [pc, #44]	; (8001974 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	f023 0207 	bic.w	r2, r3, #7
 800194c:	4909      	ldr	r1, [pc, #36]	; (8001974 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800194e:	693b      	ldr	r3, [r7, #16]
 8001950:	4313      	orrs	r3, r2
 8001952:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001954:	4b07      	ldr	r3, [pc, #28]	; (8001974 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	f003 0307 	and.w	r3, r3, #7
 800195c:	693a      	ldr	r2, [r7, #16]
 800195e:	429a      	cmp	r2, r3
 8001960:	d001      	beq.n	8001966 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001962:	2301      	movs	r3, #1
 8001964:	e000      	b.n	8001968 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001966:	2300      	movs	r3, #0
}
 8001968:	4618      	mov	r0, r3
 800196a:	3718      	adds	r7, #24
 800196c:	46bd      	mov	sp, r7
 800196e:	bd80      	pop	{r7, pc}
 8001970:	40021000 	.word	0x40021000
 8001974:	40022000 	.word	0x40022000

08001978 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	b082      	sub	sp, #8
 800197c:	af00      	add	r7, sp, #0
 800197e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	2b00      	cmp	r3, #0
 8001984:	d101      	bne.n	800198a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001986:	2301      	movs	r3, #1
 8001988:	e01d      	b.n	80019c6 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001990:	b2db      	uxtb	r3, r3
 8001992:	2b00      	cmp	r3, #0
 8001994:	d106      	bne.n	80019a4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	2200      	movs	r2, #0
 800199a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800199e:	6878      	ldr	r0, [r7, #4]
 80019a0:	f7fe fdd8 	bl	8000554 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	2202      	movs	r2, #2
 80019a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681a      	ldr	r2, [r3, #0]
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	3304      	adds	r3, #4
 80019b4:	4619      	mov	r1, r3
 80019b6:	4610      	mov	r0, r2
 80019b8:	f000 f9cc 	bl	8001d54 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	2201      	movs	r2, #1
 80019c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80019c4:	2300      	movs	r3, #0
}
 80019c6:	4618      	mov	r0, r3
 80019c8:	3708      	adds	r7, #8
 80019ca:	46bd      	mov	sp, r7
 80019cc:	bd80      	pop	{r7, pc}
	...

080019d0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b084      	sub	sp, #16
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]
 80019d8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	2201      	movs	r2, #1
 80019e0:	6839      	ldr	r1, [r7, #0]
 80019e2:	4618      	mov	r0, r3
 80019e4:	f000 fc98 	bl	8002318 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	4a19      	ldr	r2, [pc, #100]	; (8001a54 <HAL_TIM_PWM_Start+0x84>)
 80019ee:	4293      	cmp	r3, r2
 80019f0:	d009      	beq.n	8001a06 <HAL_TIM_PWM_Start+0x36>
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	4a18      	ldr	r2, [pc, #96]	; (8001a58 <HAL_TIM_PWM_Start+0x88>)
 80019f8:	4293      	cmp	r3, r2
 80019fa:	d004      	beq.n	8001a06 <HAL_TIM_PWM_Start+0x36>
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	4a16      	ldr	r2, [pc, #88]	; (8001a5c <HAL_TIM_PWM_Start+0x8c>)
 8001a02:	4293      	cmp	r3, r2
 8001a04:	d101      	bne.n	8001a0a <HAL_TIM_PWM_Start+0x3a>
 8001a06:	2301      	movs	r3, #1
 8001a08:	e000      	b.n	8001a0c <HAL_TIM_PWM_Start+0x3c>
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d007      	beq.n	8001a20 <HAL_TIM_PWM_Start+0x50>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001a1e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	689a      	ldr	r2, [r3, #8]
 8001a26:	4b0e      	ldr	r3, [pc, #56]	; (8001a60 <HAL_TIM_PWM_Start+0x90>)
 8001a28:	4013      	ands	r3, r2
 8001a2a:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	2b06      	cmp	r3, #6
 8001a30:	d00b      	beq.n	8001a4a <HAL_TIM_PWM_Start+0x7a>
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a38:	d007      	beq.n	8001a4a <HAL_TIM_PWM_Start+0x7a>
  {
    __HAL_TIM_ENABLE(htim);
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	681a      	ldr	r2, [r3, #0]
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	f042 0201 	orr.w	r2, r2, #1
 8001a48:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001a4a:	2300      	movs	r3, #0
}
 8001a4c:	4618      	mov	r0, r3
 8001a4e:	3710      	adds	r7, #16
 8001a50:	46bd      	mov	sp, r7
 8001a52:	bd80      	pop	{r7, pc}
 8001a54:	40012c00 	.word	0x40012c00
 8001a58:	40014000 	.word	0x40014000
 8001a5c:	40014400 	.word	0x40014400
 8001a60:	00010007 	.word	0x00010007

08001a64 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b082      	sub	sp, #8
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]
 8001a6c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	2200      	movs	r2, #0
 8001a74:	6839      	ldr	r1, [r7, #0]
 8001a76:	4618      	mov	r0, r3
 8001a78:	f000 fc4e 	bl	8002318 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	4a25      	ldr	r2, [pc, #148]	; (8001b18 <HAL_TIM_PWM_Stop+0xb4>)
 8001a82:	4293      	cmp	r3, r2
 8001a84:	d009      	beq.n	8001a9a <HAL_TIM_PWM_Stop+0x36>
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	4a24      	ldr	r2, [pc, #144]	; (8001b1c <HAL_TIM_PWM_Stop+0xb8>)
 8001a8c:	4293      	cmp	r3, r2
 8001a8e:	d004      	beq.n	8001a9a <HAL_TIM_PWM_Stop+0x36>
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	4a22      	ldr	r2, [pc, #136]	; (8001b20 <HAL_TIM_PWM_Stop+0xbc>)
 8001a96:	4293      	cmp	r3, r2
 8001a98:	d101      	bne.n	8001a9e <HAL_TIM_PWM_Stop+0x3a>
 8001a9a:	2301      	movs	r3, #1
 8001a9c:	e000      	b.n	8001aa0 <HAL_TIM_PWM_Stop+0x3c>
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d017      	beq.n	8001ad4 <HAL_TIM_PWM_Stop+0x70>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	6a1a      	ldr	r2, [r3, #32]
 8001aaa:	f241 1311 	movw	r3, #4369	; 0x1111
 8001aae:	4013      	ands	r3, r2
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d10f      	bne.n	8001ad4 <HAL_TIM_PWM_Stop+0x70>
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	6a1a      	ldr	r2, [r3, #32]
 8001aba:	f240 4344 	movw	r3, #1092	; 0x444
 8001abe:	4013      	ands	r3, r2
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d107      	bne.n	8001ad4 <HAL_TIM_PWM_Stop+0x70>
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001ad2:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	6a1a      	ldr	r2, [r3, #32]
 8001ada:	f241 1311 	movw	r3, #4369	; 0x1111
 8001ade:	4013      	ands	r3, r2
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d10f      	bne.n	8001b04 <HAL_TIM_PWM_Stop+0xa0>
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	6a1a      	ldr	r2, [r3, #32]
 8001aea:	f240 4344 	movw	r3, #1092	; 0x444
 8001aee:	4013      	ands	r3, r2
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d107      	bne.n	8001b04 <HAL_TIM_PWM_Stop+0xa0>
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	681a      	ldr	r2, [r3, #0]
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	f022 0201 	bic.w	r2, r2, #1
 8001b02:	601a      	str	r2, [r3, #0]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	2201      	movs	r2, #1
 8001b08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8001b0c:	2300      	movs	r3, #0
}
 8001b0e:	4618      	mov	r0, r3
 8001b10:	3708      	adds	r7, #8
 8001b12:	46bd      	mov	sp, r7
 8001b14:	bd80      	pop	{r7, pc}
 8001b16:	bf00      	nop
 8001b18:	40012c00 	.word	0x40012c00
 8001b1c:	40014000 	.word	0x40014000
 8001b20:	40014400 	.word	0x40014400

08001b24 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	b084      	sub	sp, #16
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	60f8      	str	r0, [r7, #12]
 8001b2c:	60b9      	str	r1, [r7, #8]
 8001b2e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001b36:	2b01      	cmp	r3, #1
 8001b38:	d101      	bne.n	8001b3e <HAL_TIM_PWM_ConfigChannel+0x1a>
 8001b3a:	2302      	movs	r3, #2
 8001b3c:	e105      	b.n	8001d4a <HAL_TIM_PWM_ConfigChannel+0x226>
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	2201      	movs	r2, #1
 8001b42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	2202      	movs	r2, #2
 8001b4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	2b14      	cmp	r3, #20
 8001b52:	f200 80f0 	bhi.w	8001d36 <HAL_TIM_PWM_ConfigChannel+0x212>
 8001b56:	a201      	add	r2, pc, #4	; (adr r2, 8001b5c <HAL_TIM_PWM_ConfigChannel+0x38>)
 8001b58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b5c:	08001bb1 	.word	0x08001bb1
 8001b60:	08001d37 	.word	0x08001d37
 8001b64:	08001d37 	.word	0x08001d37
 8001b68:	08001d37 	.word	0x08001d37
 8001b6c:	08001bf1 	.word	0x08001bf1
 8001b70:	08001d37 	.word	0x08001d37
 8001b74:	08001d37 	.word	0x08001d37
 8001b78:	08001d37 	.word	0x08001d37
 8001b7c:	08001c33 	.word	0x08001c33
 8001b80:	08001d37 	.word	0x08001d37
 8001b84:	08001d37 	.word	0x08001d37
 8001b88:	08001d37 	.word	0x08001d37
 8001b8c:	08001c73 	.word	0x08001c73
 8001b90:	08001d37 	.word	0x08001d37
 8001b94:	08001d37 	.word	0x08001d37
 8001b98:	08001d37 	.word	0x08001d37
 8001b9c:	08001cb5 	.word	0x08001cb5
 8001ba0:	08001d37 	.word	0x08001d37
 8001ba4:	08001d37 	.word	0x08001d37
 8001ba8:	08001d37 	.word	0x08001d37
 8001bac:	08001cf5 	.word	0x08001cf5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	68b9      	ldr	r1, [r7, #8]
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	f000 f930 	bl	8001e1c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	699a      	ldr	r2, [r3, #24]
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	f042 0208 	orr.w	r2, r2, #8
 8001bca:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	699a      	ldr	r2, [r3, #24]
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	f022 0204 	bic.w	r2, r2, #4
 8001bda:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	6999      	ldr	r1, [r3, #24]
 8001be2:	68bb      	ldr	r3, [r7, #8]
 8001be4:	691a      	ldr	r2, [r3, #16]
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	430a      	orrs	r2, r1
 8001bec:	619a      	str	r2, [r3, #24]
      break;
 8001bee:	e0a3      	b.n	8001d38 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	68b9      	ldr	r1, [r7, #8]
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	f000 f98c 	bl	8001f14 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	699a      	ldr	r2, [r3, #24]
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001c0a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	699a      	ldr	r2, [r3, #24]
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001c1a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	6999      	ldr	r1, [r3, #24]
 8001c22:	68bb      	ldr	r3, [r7, #8]
 8001c24:	691b      	ldr	r3, [r3, #16]
 8001c26:	021a      	lsls	r2, r3, #8
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	430a      	orrs	r2, r1
 8001c2e:	619a      	str	r2, [r3, #24]
      break;
 8001c30:	e082      	b.n	8001d38 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	68b9      	ldr	r1, [r7, #8]
 8001c38:	4618      	mov	r0, r3
 8001c3a:	f000 f9e5 	bl	8002008 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	69da      	ldr	r2, [r3, #28]
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	f042 0208 	orr.w	r2, r2, #8
 8001c4c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	69da      	ldr	r2, [r3, #28]
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	f022 0204 	bic.w	r2, r2, #4
 8001c5c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	69d9      	ldr	r1, [r3, #28]
 8001c64:	68bb      	ldr	r3, [r7, #8]
 8001c66:	691a      	ldr	r2, [r3, #16]
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	430a      	orrs	r2, r1
 8001c6e:	61da      	str	r2, [r3, #28]
      break;
 8001c70:	e062      	b.n	8001d38 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	68b9      	ldr	r1, [r7, #8]
 8001c78:	4618      	mov	r0, r3
 8001c7a:	f000 fa3d 	bl	80020f8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	69da      	ldr	r2, [r3, #28]
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001c8c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	69da      	ldr	r2, [r3, #28]
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001c9c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	69d9      	ldr	r1, [r3, #28]
 8001ca4:	68bb      	ldr	r3, [r7, #8]
 8001ca6:	691b      	ldr	r3, [r3, #16]
 8001ca8:	021a      	lsls	r2, r3, #8
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	430a      	orrs	r2, r1
 8001cb0:	61da      	str	r2, [r3, #28]
      break;
 8001cb2:	e041      	b.n	8001d38 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	68b9      	ldr	r1, [r7, #8]
 8001cba:	4618      	mov	r0, r3
 8001cbc:	f000 fa7a 	bl	80021b4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	f042 0208 	orr.w	r2, r2, #8
 8001cce:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	f022 0204 	bic.w	r2, r2, #4
 8001cde:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8001ce6:	68bb      	ldr	r3, [r7, #8]
 8001ce8:	691a      	ldr	r2, [r3, #16]
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	430a      	orrs	r2, r1
 8001cf0:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8001cf2:	e021      	b.n	8001d38 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	68b9      	ldr	r1, [r7, #8]
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	f000 fab2 	bl	8002264 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001d0e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001d1e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8001d26:	68bb      	ldr	r3, [r7, #8]
 8001d28:	691b      	ldr	r3, [r3, #16]
 8001d2a:	021a      	lsls	r2, r3, #8
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	430a      	orrs	r2, r1
 8001d32:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8001d34:	e000      	b.n	8001d38 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      break;
 8001d36:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	2201      	movs	r2, #1
 8001d3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	2200      	movs	r2, #0
 8001d44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8001d48:	2300      	movs	r3, #0
}
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	3710      	adds	r7, #16
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	bd80      	pop	{r7, pc}
 8001d52:	bf00      	nop

08001d54 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001d54:	b480      	push	{r7}
 8001d56:	b085      	sub	sp, #20
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	6078      	str	r0, [r7, #4]
 8001d5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	4a2a      	ldr	r2, [pc, #168]	; (8001e10 <TIM_Base_SetConfig+0xbc>)
 8001d68:	4293      	cmp	r3, r2
 8001d6a:	d003      	beq.n	8001d74 <TIM_Base_SetConfig+0x20>
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d72:	d108      	bne.n	8001d86 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001d7a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001d7c:	683b      	ldr	r3, [r7, #0]
 8001d7e:	685b      	ldr	r3, [r3, #4]
 8001d80:	68fa      	ldr	r2, [r7, #12]
 8001d82:	4313      	orrs	r3, r2
 8001d84:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	4a21      	ldr	r2, [pc, #132]	; (8001e10 <TIM_Base_SetConfig+0xbc>)
 8001d8a:	4293      	cmp	r3, r2
 8001d8c:	d00b      	beq.n	8001da6 <TIM_Base_SetConfig+0x52>
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d94:	d007      	beq.n	8001da6 <TIM_Base_SetConfig+0x52>
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	4a1e      	ldr	r2, [pc, #120]	; (8001e14 <TIM_Base_SetConfig+0xc0>)
 8001d9a:	4293      	cmp	r3, r2
 8001d9c:	d003      	beq.n	8001da6 <TIM_Base_SetConfig+0x52>
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	4a1d      	ldr	r2, [pc, #116]	; (8001e18 <TIM_Base_SetConfig+0xc4>)
 8001da2:	4293      	cmp	r3, r2
 8001da4:	d108      	bne.n	8001db8 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001dac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001dae:	683b      	ldr	r3, [r7, #0]
 8001db0:	68db      	ldr	r3, [r3, #12]
 8001db2:	68fa      	ldr	r2, [r7, #12]
 8001db4:	4313      	orrs	r3, r2
 8001db6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001dbe:	683b      	ldr	r3, [r7, #0]
 8001dc0:	695b      	ldr	r3, [r3, #20]
 8001dc2:	4313      	orrs	r3, r2
 8001dc4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	68fa      	ldr	r2, [r7, #12]
 8001dca:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001dcc:	683b      	ldr	r3, [r7, #0]
 8001dce:	689a      	ldr	r2, [r3, #8]
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001dd4:	683b      	ldr	r3, [r7, #0]
 8001dd6:	681a      	ldr	r2, [r3, #0]
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	4a0c      	ldr	r2, [pc, #48]	; (8001e10 <TIM_Base_SetConfig+0xbc>)
 8001de0:	4293      	cmp	r3, r2
 8001de2:	d007      	beq.n	8001df4 <TIM_Base_SetConfig+0xa0>
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	4a0b      	ldr	r2, [pc, #44]	; (8001e14 <TIM_Base_SetConfig+0xc0>)
 8001de8:	4293      	cmp	r3, r2
 8001dea:	d003      	beq.n	8001df4 <TIM_Base_SetConfig+0xa0>
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	4a0a      	ldr	r2, [pc, #40]	; (8001e18 <TIM_Base_SetConfig+0xc4>)
 8001df0:	4293      	cmp	r3, r2
 8001df2:	d103      	bne.n	8001dfc <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001df4:	683b      	ldr	r3, [r7, #0]
 8001df6:	691a      	ldr	r2, [r3, #16]
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	2201      	movs	r2, #1
 8001e00:	615a      	str	r2, [r3, #20]
}
 8001e02:	bf00      	nop
 8001e04:	3714      	adds	r7, #20
 8001e06:	46bd      	mov	sp, r7
 8001e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0c:	4770      	bx	lr
 8001e0e:	bf00      	nop
 8001e10:	40012c00 	.word	0x40012c00
 8001e14:	40014000 	.word	0x40014000
 8001e18:	40014400 	.word	0x40014400

08001e1c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8001e1c:	b480      	push	{r7}
 8001e1e:	b087      	sub	sp, #28
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
 8001e24:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	6a1b      	ldr	r3, [r3, #32]
 8001e2a:	f023 0201 	bic.w	r2, r3, #1
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	6a1b      	ldr	r3, [r3, #32]
 8001e36:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	685b      	ldr	r3, [r3, #4]
 8001e3c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	699b      	ldr	r3, [r3, #24]
 8001e42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001e4e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	f023 0303 	bic.w	r3, r3, #3
 8001e56:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001e58:	683b      	ldr	r3, [r7, #0]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	68fa      	ldr	r2, [r7, #12]
 8001e5e:	4313      	orrs	r3, r2
 8001e60:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8001e62:	697b      	ldr	r3, [r7, #20]
 8001e64:	f023 0302 	bic.w	r3, r3, #2
 8001e68:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8001e6a:	683b      	ldr	r3, [r7, #0]
 8001e6c:	689b      	ldr	r3, [r3, #8]
 8001e6e:	697a      	ldr	r2, [r7, #20]
 8001e70:	4313      	orrs	r3, r2
 8001e72:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	4a24      	ldr	r2, [pc, #144]	; (8001f08 <TIM_OC1_SetConfig+0xec>)
 8001e78:	4293      	cmp	r3, r2
 8001e7a:	d007      	beq.n	8001e8c <TIM_OC1_SetConfig+0x70>
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	4a23      	ldr	r2, [pc, #140]	; (8001f0c <TIM_OC1_SetConfig+0xf0>)
 8001e80:	4293      	cmp	r3, r2
 8001e82:	d003      	beq.n	8001e8c <TIM_OC1_SetConfig+0x70>
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	4a22      	ldr	r2, [pc, #136]	; (8001f10 <TIM_OC1_SetConfig+0xf4>)
 8001e88:	4293      	cmp	r3, r2
 8001e8a:	d10c      	bne.n	8001ea6 <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8001e8c:	697b      	ldr	r3, [r7, #20]
 8001e8e:	f023 0308 	bic.w	r3, r3, #8
 8001e92:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8001e94:	683b      	ldr	r3, [r7, #0]
 8001e96:	68db      	ldr	r3, [r3, #12]
 8001e98:	697a      	ldr	r2, [r7, #20]
 8001e9a:	4313      	orrs	r3, r2
 8001e9c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8001e9e:	697b      	ldr	r3, [r7, #20]
 8001ea0:	f023 0304 	bic.w	r3, r3, #4
 8001ea4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	4a17      	ldr	r2, [pc, #92]	; (8001f08 <TIM_OC1_SetConfig+0xec>)
 8001eaa:	4293      	cmp	r3, r2
 8001eac:	d007      	beq.n	8001ebe <TIM_OC1_SetConfig+0xa2>
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	4a16      	ldr	r2, [pc, #88]	; (8001f0c <TIM_OC1_SetConfig+0xf0>)
 8001eb2:	4293      	cmp	r3, r2
 8001eb4:	d003      	beq.n	8001ebe <TIM_OC1_SetConfig+0xa2>
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	4a15      	ldr	r2, [pc, #84]	; (8001f10 <TIM_OC1_SetConfig+0xf4>)
 8001eba:	4293      	cmp	r3, r2
 8001ebc:	d111      	bne.n	8001ee2 <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8001ebe:	693b      	ldr	r3, [r7, #16]
 8001ec0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001ec4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8001ec6:	693b      	ldr	r3, [r7, #16]
 8001ec8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001ecc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8001ece:	683b      	ldr	r3, [r7, #0]
 8001ed0:	695b      	ldr	r3, [r3, #20]
 8001ed2:	693a      	ldr	r2, [r7, #16]
 8001ed4:	4313      	orrs	r3, r2
 8001ed6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8001ed8:	683b      	ldr	r3, [r7, #0]
 8001eda:	699b      	ldr	r3, [r3, #24]
 8001edc:	693a      	ldr	r2, [r7, #16]
 8001ede:	4313      	orrs	r3, r2
 8001ee0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	693a      	ldr	r2, [r7, #16]
 8001ee6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	68fa      	ldr	r2, [r7, #12]
 8001eec:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8001eee:	683b      	ldr	r3, [r7, #0]
 8001ef0:	685a      	ldr	r2, [r3, #4]
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	697a      	ldr	r2, [r7, #20]
 8001efa:	621a      	str	r2, [r3, #32]
}
 8001efc:	bf00      	nop
 8001efe:	371c      	adds	r7, #28
 8001f00:	46bd      	mov	sp, r7
 8001f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f06:	4770      	bx	lr
 8001f08:	40012c00 	.word	0x40012c00
 8001f0c:	40014000 	.word	0x40014000
 8001f10:	40014400 	.word	0x40014400

08001f14 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8001f14:	b480      	push	{r7}
 8001f16:	b087      	sub	sp, #28
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	6078      	str	r0, [r7, #4]
 8001f1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	6a1b      	ldr	r3, [r3, #32]
 8001f22:	f023 0210 	bic.w	r2, r3, #16
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	6a1b      	ldr	r3, [r3, #32]
 8001f2e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	685b      	ldr	r3, [r3, #4]
 8001f34:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	699b      	ldr	r3, [r3, #24]
 8001f3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001f42:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001f46:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001f4e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001f50:	683b      	ldr	r3, [r7, #0]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	021b      	lsls	r3, r3, #8
 8001f56:	68fa      	ldr	r2, [r7, #12]
 8001f58:	4313      	orrs	r3, r2
 8001f5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8001f5c:	697b      	ldr	r3, [r7, #20]
 8001f5e:	f023 0320 	bic.w	r3, r3, #32
 8001f62:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8001f64:	683b      	ldr	r3, [r7, #0]
 8001f66:	689b      	ldr	r3, [r3, #8]
 8001f68:	011b      	lsls	r3, r3, #4
 8001f6a:	697a      	ldr	r2, [r7, #20]
 8001f6c:	4313      	orrs	r3, r2
 8001f6e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	4a22      	ldr	r2, [pc, #136]	; (8001ffc <TIM_OC2_SetConfig+0xe8>)
 8001f74:	4293      	cmp	r3, r2
 8001f76:	d10d      	bne.n	8001f94 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8001f78:	697b      	ldr	r3, [r7, #20]
 8001f7a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001f7e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8001f80:	683b      	ldr	r3, [r7, #0]
 8001f82:	68db      	ldr	r3, [r3, #12]
 8001f84:	011b      	lsls	r3, r3, #4
 8001f86:	697a      	ldr	r2, [r7, #20]
 8001f88:	4313      	orrs	r3, r2
 8001f8a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8001f8c:	697b      	ldr	r3, [r7, #20]
 8001f8e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001f92:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	4a19      	ldr	r2, [pc, #100]	; (8001ffc <TIM_OC2_SetConfig+0xe8>)
 8001f98:	4293      	cmp	r3, r2
 8001f9a:	d007      	beq.n	8001fac <TIM_OC2_SetConfig+0x98>
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	4a18      	ldr	r2, [pc, #96]	; (8002000 <TIM_OC2_SetConfig+0xec>)
 8001fa0:	4293      	cmp	r3, r2
 8001fa2:	d003      	beq.n	8001fac <TIM_OC2_SetConfig+0x98>
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	4a17      	ldr	r2, [pc, #92]	; (8002004 <TIM_OC2_SetConfig+0xf0>)
 8001fa8:	4293      	cmp	r3, r2
 8001faa:	d113      	bne.n	8001fd4 <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8001fac:	693b      	ldr	r3, [r7, #16]
 8001fae:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001fb2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8001fb4:	693b      	ldr	r3, [r7, #16]
 8001fb6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001fba:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8001fbc:	683b      	ldr	r3, [r7, #0]
 8001fbe:	695b      	ldr	r3, [r3, #20]
 8001fc0:	009b      	lsls	r3, r3, #2
 8001fc2:	693a      	ldr	r2, [r7, #16]
 8001fc4:	4313      	orrs	r3, r2
 8001fc6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8001fc8:	683b      	ldr	r3, [r7, #0]
 8001fca:	699b      	ldr	r3, [r3, #24]
 8001fcc:	009b      	lsls	r3, r3, #2
 8001fce:	693a      	ldr	r2, [r7, #16]
 8001fd0:	4313      	orrs	r3, r2
 8001fd2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	693a      	ldr	r2, [r7, #16]
 8001fd8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	68fa      	ldr	r2, [r7, #12]
 8001fde:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8001fe0:	683b      	ldr	r3, [r7, #0]
 8001fe2:	685a      	ldr	r2, [r3, #4]
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	697a      	ldr	r2, [r7, #20]
 8001fec:	621a      	str	r2, [r3, #32]
}
 8001fee:	bf00      	nop
 8001ff0:	371c      	adds	r7, #28
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff8:	4770      	bx	lr
 8001ffa:	bf00      	nop
 8001ffc:	40012c00 	.word	0x40012c00
 8002000:	40014000 	.word	0x40014000
 8002004:	40014400 	.word	0x40014400

08002008 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002008:	b480      	push	{r7}
 800200a:	b087      	sub	sp, #28
 800200c:	af00      	add	r7, sp, #0
 800200e:	6078      	str	r0, [r7, #4]
 8002010:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	6a1b      	ldr	r3, [r3, #32]
 8002016:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	6a1b      	ldr	r3, [r3, #32]
 8002022:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	685b      	ldr	r3, [r3, #4]
 8002028:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	69db      	ldr	r3, [r3, #28]
 800202e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002036:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800203a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	f023 0303 	bic.w	r3, r3, #3
 8002042:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002044:	683b      	ldr	r3, [r7, #0]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	68fa      	ldr	r2, [r7, #12]
 800204a:	4313      	orrs	r3, r2
 800204c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800204e:	697b      	ldr	r3, [r7, #20]
 8002050:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002054:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002056:	683b      	ldr	r3, [r7, #0]
 8002058:	689b      	ldr	r3, [r3, #8]
 800205a:	021b      	lsls	r3, r3, #8
 800205c:	697a      	ldr	r2, [r7, #20]
 800205e:	4313      	orrs	r3, r2
 8002060:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	4a21      	ldr	r2, [pc, #132]	; (80020ec <TIM_OC3_SetConfig+0xe4>)
 8002066:	4293      	cmp	r3, r2
 8002068:	d10d      	bne.n	8002086 <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800206a:	697b      	ldr	r3, [r7, #20]
 800206c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002070:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002072:	683b      	ldr	r3, [r7, #0]
 8002074:	68db      	ldr	r3, [r3, #12]
 8002076:	021b      	lsls	r3, r3, #8
 8002078:	697a      	ldr	r2, [r7, #20]
 800207a:	4313      	orrs	r3, r2
 800207c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800207e:	697b      	ldr	r3, [r7, #20]
 8002080:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002084:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	4a18      	ldr	r2, [pc, #96]	; (80020ec <TIM_OC3_SetConfig+0xe4>)
 800208a:	4293      	cmp	r3, r2
 800208c:	d007      	beq.n	800209e <TIM_OC3_SetConfig+0x96>
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	4a17      	ldr	r2, [pc, #92]	; (80020f0 <TIM_OC3_SetConfig+0xe8>)
 8002092:	4293      	cmp	r3, r2
 8002094:	d003      	beq.n	800209e <TIM_OC3_SetConfig+0x96>
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	4a16      	ldr	r2, [pc, #88]	; (80020f4 <TIM_OC3_SetConfig+0xec>)
 800209a:	4293      	cmp	r3, r2
 800209c:	d113      	bne.n	80020c6 <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800209e:	693b      	ldr	r3, [r7, #16]
 80020a0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80020a4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80020a6:	693b      	ldr	r3, [r7, #16]
 80020a8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80020ac:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80020ae:	683b      	ldr	r3, [r7, #0]
 80020b0:	695b      	ldr	r3, [r3, #20]
 80020b2:	011b      	lsls	r3, r3, #4
 80020b4:	693a      	ldr	r2, [r7, #16]
 80020b6:	4313      	orrs	r3, r2
 80020b8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80020ba:	683b      	ldr	r3, [r7, #0]
 80020bc:	699b      	ldr	r3, [r3, #24]
 80020be:	011b      	lsls	r3, r3, #4
 80020c0:	693a      	ldr	r2, [r7, #16]
 80020c2:	4313      	orrs	r3, r2
 80020c4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	693a      	ldr	r2, [r7, #16]
 80020ca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	68fa      	ldr	r2, [r7, #12]
 80020d0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80020d2:	683b      	ldr	r3, [r7, #0]
 80020d4:	685a      	ldr	r2, [r3, #4]
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	697a      	ldr	r2, [r7, #20]
 80020de:	621a      	str	r2, [r3, #32]
}
 80020e0:	bf00      	nop
 80020e2:	371c      	adds	r7, #28
 80020e4:	46bd      	mov	sp, r7
 80020e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ea:	4770      	bx	lr
 80020ec:	40012c00 	.word	0x40012c00
 80020f0:	40014000 	.word	0x40014000
 80020f4:	40014400 	.word	0x40014400

080020f8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80020f8:	b480      	push	{r7}
 80020fa:	b087      	sub	sp, #28
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	6078      	str	r0, [r7, #4]
 8002100:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	6a1b      	ldr	r3, [r3, #32]
 8002106:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	6a1b      	ldr	r3, [r3, #32]
 8002112:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	685b      	ldr	r3, [r3, #4]
 8002118:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	69db      	ldr	r3, [r3, #28]
 800211e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002126:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800212a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002132:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002134:	683b      	ldr	r3, [r7, #0]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	021b      	lsls	r3, r3, #8
 800213a:	68fa      	ldr	r2, [r7, #12]
 800213c:	4313      	orrs	r3, r2
 800213e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002140:	693b      	ldr	r3, [r7, #16]
 8002142:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002146:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002148:	683b      	ldr	r3, [r7, #0]
 800214a:	689b      	ldr	r3, [r3, #8]
 800214c:	031b      	lsls	r3, r3, #12
 800214e:	693a      	ldr	r2, [r7, #16]
 8002150:	4313      	orrs	r3, r2
 8002152:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	4a14      	ldr	r2, [pc, #80]	; (80021a8 <TIM_OC4_SetConfig+0xb0>)
 8002158:	4293      	cmp	r3, r2
 800215a:	d007      	beq.n	800216c <TIM_OC4_SetConfig+0x74>
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	4a13      	ldr	r2, [pc, #76]	; (80021ac <TIM_OC4_SetConfig+0xb4>)
 8002160:	4293      	cmp	r3, r2
 8002162:	d003      	beq.n	800216c <TIM_OC4_SetConfig+0x74>
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	4a12      	ldr	r2, [pc, #72]	; (80021b0 <TIM_OC4_SetConfig+0xb8>)
 8002168:	4293      	cmp	r3, r2
 800216a:	d109      	bne.n	8002180 <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800216c:	697b      	ldr	r3, [r7, #20]
 800216e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002172:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002174:	683b      	ldr	r3, [r7, #0]
 8002176:	695b      	ldr	r3, [r3, #20]
 8002178:	019b      	lsls	r3, r3, #6
 800217a:	697a      	ldr	r2, [r7, #20]
 800217c:	4313      	orrs	r3, r2
 800217e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	697a      	ldr	r2, [r7, #20]
 8002184:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	68fa      	ldr	r2, [r7, #12]
 800218a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800218c:	683b      	ldr	r3, [r7, #0]
 800218e:	685a      	ldr	r2, [r3, #4]
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	693a      	ldr	r2, [r7, #16]
 8002198:	621a      	str	r2, [r3, #32]
}
 800219a:	bf00      	nop
 800219c:	371c      	adds	r7, #28
 800219e:	46bd      	mov	sp, r7
 80021a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a4:	4770      	bx	lr
 80021a6:	bf00      	nop
 80021a8:	40012c00 	.word	0x40012c00
 80021ac:	40014000 	.word	0x40014000
 80021b0:	40014400 	.word	0x40014400

080021b4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80021b4:	b480      	push	{r7}
 80021b6:	b087      	sub	sp, #28
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	6078      	str	r0, [r7, #4]
 80021bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	6a1b      	ldr	r3, [r3, #32]
 80021c2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	6a1b      	ldr	r3, [r3, #32]
 80021ce:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	685b      	ldr	r3, [r3, #4]
 80021d4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80021e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80021e6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80021e8:	683b      	ldr	r3, [r7, #0]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	68fa      	ldr	r2, [r7, #12]
 80021ee:	4313      	orrs	r3, r2
 80021f0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80021f2:	693b      	ldr	r3, [r7, #16]
 80021f4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80021f8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80021fa:	683b      	ldr	r3, [r7, #0]
 80021fc:	689b      	ldr	r3, [r3, #8]
 80021fe:	041b      	lsls	r3, r3, #16
 8002200:	693a      	ldr	r2, [r7, #16]
 8002202:	4313      	orrs	r3, r2
 8002204:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	4a13      	ldr	r2, [pc, #76]	; (8002258 <TIM_OC5_SetConfig+0xa4>)
 800220a:	4293      	cmp	r3, r2
 800220c:	d007      	beq.n	800221e <TIM_OC5_SetConfig+0x6a>
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	4a12      	ldr	r2, [pc, #72]	; (800225c <TIM_OC5_SetConfig+0xa8>)
 8002212:	4293      	cmp	r3, r2
 8002214:	d003      	beq.n	800221e <TIM_OC5_SetConfig+0x6a>
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	4a11      	ldr	r2, [pc, #68]	; (8002260 <TIM_OC5_SetConfig+0xac>)
 800221a:	4293      	cmp	r3, r2
 800221c:	d109      	bne.n	8002232 <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800221e:	697b      	ldr	r3, [r7, #20]
 8002220:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002224:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8002226:	683b      	ldr	r3, [r7, #0]
 8002228:	695b      	ldr	r3, [r3, #20]
 800222a:	021b      	lsls	r3, r3, #8
 800222c:	697a      	ldr	r2, [r7, #20]
 800222e:	4313      	orrs	r3, r2
 8002230:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	697a      	ldr	r2, [r7, #20]
 8002236:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	68fa      	ldr	r2, [r7, #12]
 800223c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800223e:	683b      	ldr	r3, [r7, #0]
 8002240:	685a      	ldr	r2, [r3, #4]
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	693a      	ldr	r2, [r7, #16]
 800224a:	621a      	str	r2, [r3, #32]
}
 800224c:	bf00      	nop
 800224e:	371c      	adds	r7, #28
 8002250:	46bd      	mov	sp, r7
 8002252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002256:	4770      	bx	lr
 8002258:	40012c00 	.word	0x40012c00
 800225c:	40014000 	.word	0x40014000
 8002260:	40014400 	.word	0x40014400

08002264 <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8002264:	b480      	push	{r7}
 8002266:	b087      	sub	sp, #28
 8002268:	af00      	add	r7, sp, #0
 800226a:	6078      	str	r0, [r7, #4]
 800226c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	6a1b      	ldr	r3, [r3, #32]
 8002272:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	6a1b      	ldr	r3, [r3, #32]
 800227e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	685b      	ldr	r3, [r3, #4]
 8002284:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800228a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002292:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002296:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002298:	683b      	ldr	r3, [r7, #0]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	021b      	lsls	r3, r3, #8
 800229e:	68fa      	ldr	r2, [r7, #12]
 80022a0:	4313      	orrs	r3, r2
 80022a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80022a4:	693b      	ldr	r3, [r7, #16]
 80022a6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80022aa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80022ac:	683b      	ldr	r3, [r7, #0]
 80022ae:	689b      	ldr	r3, [r3, #8]
 80022b0:	051b      	lsls	r3, r3, #20
 80022b2:	693a      	ldr	r2, [r7, #16]
 80022b4:	4313      	orrs	r3, r2
 80022b6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	4a14      	ldr	r2, [pc, #80]	; (800230c <TIM_OC6_SetConfig+0xa8>)
 80022bc:	4293      	cmp	r3, r2
 80022be:	d007      	beq.n	80022d0 <TIM_OC6_SetConfig+0x6c>
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	4a13      	ldr	r2, [pc, #76]	; (8002310 <TIM_OC6_SetConfig+0xac>)
 80022c4:	4293      	cmp	r3, r2
 80022c6:	d003      	beq.n	80022d0 <TIM_OC6_SetConfig+0x6c>
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	4a12      	ldr	r2, [pc, #72]	; (8002314 <TIM_OC6_SetConfig+0xb0>)
 80022cc:	4293      	cmp	r3, r2
 80022ce:	d109      	bne.n	80022e4 <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80022d0:	697b      	ldr	r3, [r7, #20]
 80022d2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80022d6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80022d8:	683b      	ldr	r3, [r7, #0]
 80022da:	695b      	ldr	r3, [r3, #20]
 80022dc:	029b      	lsls	r3, r3, #10
 80022de:	697a      	ldr	r2, [r7, #20]
 80022e0:	4313      	orrs	r3, r2
 80022e2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	697a      	ldr	r2, [r7, #20]
 80022e8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	68fa      	ldr	r2, [r7, #12]
 80022ee:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80022f0:	683b      	ldr	r3, [r7, #0]
 80022f2:	685a      	ldr	r2, [r3, #4]
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	693a      	ldr	r2, [r7, #16]
 80022fc:	621a      	str	r2, [r3, #32]
}
 80022fe:	bf00      	nop
 8002300:	371c      	adds	r7, #28
 8002302:	46bd      	mov	sp, r7
 8002304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002308:	4770      	bx	lr
 800230a:	bf00      	nop
 800230c:	40012c00 	.word	0x40012c00
 8002310:	40014000 	.word	0x40014000
 8002314:	40014400 	.word	0x40014400

08002318 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002318:	b480      	push	{r7}
 800231a:	b087      	sub	sp, #28
 800231c:	af00      	add	r7, sp, #0
 800231e:	60f8      	str	r0, [r7, #12]
 8002320:	60b9      	str	r1, [r7, #8]
 8002322:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002324:	68bb      	ldr	r3, [r7, #8]
 8002326:	f003 031f 	and.w	r3, r3, #31
 800232a:	2201      	movs	r2, #1
 800232c:	fa02 f303 	lsl.w	r3, r2, r3
 8002330:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	6a1a      	ldr	r2, [r3, #32]
 8002336:	697b      	ldr	r3, [r7, #20]
 8002338:	43db      	mvns	r3, r3
 800233a:	401a      	ands	r2, r3
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	6a1a      	ldr	r2, [r3, #32]
 8002344:	68bb      	ldr	r3, [r7, #8]
 8002346:	f003 031f 	and.w	r3, r3, #31
 800234a:	6879      	ldr	r1, [r7, #4]
 800234c:	fa01 f303 	lsl.w	r3, r1, r3
 8002350:	431a      	orrs	r2, r3
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	621a      	str	r2, [r3, #32]
}
 8002356:	bf00      	nop
 8002358:	371c      	adds	r7, #28
 800235a:	46bd      	mov	sp, r7
 800235c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002360:	4770      	bx	lr
	...

08002364 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002364:	b480      	push	{r7}
 8002366:	b085      	sub	sp, #20
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]
 800236c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002374:	2b01      	cmp	r3, #1
 8002376:	d101      	bne.n	800237c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002378:	2302      	movs	r3, #2
 800237a:	e04f      	b.n	800241c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	2201      	movs	r2, #1
 8002380:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	2202      	movs	r2, #2
 8002388:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	685b      	ldr	r3, [r3, #4]
 8002392:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	689b      	ldr	r3, [r3, #8]
 800239a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	4a21      	ldr	r2, [pc, #132]	; (8002428 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80023a2:	4293      	cmp	r3, r2
 80023a4:	d108      	bne.n	80023b8 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80023ac:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80023ae:	683b      	ldr	r3, [r7, #0]
 80023b0:	685b      	ldr	r3, [r3, #4]
 80023b2:	68fa      	ldr	r2, [r7, #12]
 80023b4:	4313      	orrs	r3, r2
 80023b6:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80023be:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80023c0:	683b      	ldr	r3, [r7, #0]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	68fa      	ldr	r2, [r7, #12]
 80023c6:	4313      	orrs	r3, r2
 80023c8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	68fa      	ldr	r2, [r7, #12]
 80023d0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	4a14      	ldr	r2, [pc, #80]	; (8002428 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80023d8:	4293      	cmp	r3, r2
 80023da:	d009      	beq.n	80023f0 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80023e4:	d004      	beq.n	80023f0 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	4a10      	ldr	r2, [pc, #64]	; (800242c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80023ec:	4293      	cmp	r3, r2
 80023ee:	d10c      	bne.n	800240a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80023f0:	68bb      	ldr	r3, [r7, #8]
 80023f2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80023f6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80023f8:	683b      	ldr	r3, [r7, #0]
 80023fa:	689b      	ldr	r3, [r3, #8]
 80023fc:	68ba      	ldr	r2, [r7, #8]
 80023fe:	4313      	orrs	r3, r2
 8002400:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	68ba      	ldr	r2, [r7, #8]
 8002408:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	2201      	movs	r2, #1
 800240e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	2200      	movs	r2, #0
 8002416:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800241a:	2300      	movs	r3, #0
}
 800241c:	4618      	mov	r0, r3
 800241e:	3714      	adds	r7, #20
 8002420:	46bd      	mov	sp, r7
 8002422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002426:	4770      	bx	lr
 8002428:	40012c00 	.word	0x40012c00
 800242c:	40014000 	.word	0x40014000

08002430 <__libc_init_array>:
 8002430:	b570      	push	{r4, r5, r6, lr}
 8002432:	4e0d      	ldr	r6, [pc, #52]	; (8002468 <__libc_init_array+0x38>)
 8002434:	4c0d      	ldr	r4, [pc, #52]	; (800246c <__libc_init_array+0x3c>)
 8002436:	1ba4      	subs	r4, r4, r6
 8002438:	10a4      	asrs	r4, r4, #2
 800243a:	2500      	movs	r5, #0
 800243c:	42a5      	cmp	r5, r4
 800243e:	d109      	bne.n	8002454 <__libc_init_array+0x24>
 8002440:	4e0b      	ldr	r6, [pc, #44]	; (8002470 <__libc_init_array+0x40>)
 8002442:	4c0c      	ldr	r4, [pc, #48]	; (8002474 <__libc_init_array+0x44>)
 8002444:	f000 f820 	bl	8002488 <_init>
 8002448:	1ba4      	subs	r4, r4, r6
 800244a:	10a4      	asrs	r4, r4, #2
 800244c:	2500      	movs	r5, #0
 800244e:	42a5      	cmp	r5, r4
 8002450:	d105      	bne.n	800245e <__libc_init_array+0x2e>
 8002452:	bd70      	pop	{r4, r5, r6, pc}
 8002454:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002458:	4798      	blx	r3
 800245a:	3501      	adds	r5, #1
 800245c:	e7ee      	b.n	800243c <__libc_init_array+0xc>
 800245e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002462:	4798      	blx	r3
 8002464:	3501      	adds	r5, #1
 8002466:	e7f2      	b.n	800244e <__libc_init_array+0x1e>
 8002468:	080024e0 	.word	0x080024e0
 800246c:	080024e0 	.word	0x080024e0
 8002470:	080024e0 	.word	0x080024e0
 8002474:	080024e4 	.word	0x080024e4

08002478 <memset>:
 8002478:	4402      	add	r2, r0
 800247a:	4603      	mov	r3, r0
 800247c:	4293      	cmp	r3, r2
 800247e:	d100      	bne.n	8002482 <memset+0xa>
 8002480:	4770      	bx	lr
 8002482:	f803 1b01 	strb.w	r1, [r3], #1
 8002486:	e7f9      	b.n	800247c <memset+0x4>

08002488 <_init>:
 8002488:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800248a:	bf00      	nop
 800248c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800248e:	bc08      	pop	{r3}
 8002490:	469e      	mov	lr, r3
 8002492:	4770      	bx	lr

08002494 <_fini>:
 8002494:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002496:	bf00      	nop
 8002498:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800249a:	bc08      	pop	{r3}
 800249c:	469e      	mov	lr, r3
 800249e:	4770      	bx	lr
